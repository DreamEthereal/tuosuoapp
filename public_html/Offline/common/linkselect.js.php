<?php
//dezend by http://www.yunlu99.com/
echo '/**' . "\r\n" . ' * javascript Infinite Level Linkage Select' . "\r\n" . ' * javascript 无限级联动多功能菜单' . "\r\n" . ' * ' . "\r\n" . ' * Version 2.2 (2014-02-04)' . "\r\n" . ' * @requires jQuery v1.6.0 or newer' . "\r\n" . ' *' . "\r\n" . ' * Examples at: http://linkagesel.xiaozhong.biz' . "\r\n" . ' * @Author waiting@xiaozhong.biz' . "\r\n" . ' *' . "\r\n" . ' * @copyright' . "\r\n" . ' * Copyright (C) 2014 Waiting Song' . "\r\n" . ' *' . "\r\n" . ' * Dual licensed under the MIT and GPL licenses:' . "\r\n" . ' *   http://www.opensource.org/licenses/mit-license.php' . "\r\n" . ' *   http://www.gnu.org/licenses/gpl.html' . "\r\n" . ' */' . "\r\n" . '"use strict";' . "\r\n" . 'var LinkageSel = function(opts) {' . "\r\n" . '	var $ = jQuery;' . "\r\n" . '	var that		= this;' . "\r\n" . '	this.bindEls	= [];	// [ {"obj": jqobj, "defValue": 0, "value": 0} ] 保存被绑定select的对象及相关信息 value当前值' . "\r\n" . '	//this.data		= {\'0\': {\'name\': \'root\', val: 0, cell: {}} };		// 数据根 ajax get0时需要后台处理为获取DB第一级' . "\r\n" . '	this.data		= {\'0\': {}};		// 数据根 ajax get0时需要后台处理为获取DB第一级' . "\r\n" . '	this.recycle	= [],	// 保存被删除的<option>对象以便复用' . "\r\n" . '	this.st = {' . "\r\n" . '			mvcQuery	: false,		// false: \'url?id=n\' ; true: \'url/n\'' . "\r\n" . '			ie6			: false,		// ie6-8 TRUE when jQuery1.9' . "\r\n" . '			url			: \'\',			// url to get ALL data (only once execute)' . "\r\n" . '			ajax		: \'\',			// ajax url to get level-data json ' . "\r\n" . '			autoBind	: true,		    // 自动生成下级<select>' . "\r\n" . '			autoHide	: true,		    // 自动隐藏下级菜单.若false,则可配合level固定值使用' . "\r\n" . '			hideWidth	: true,	        // true-display:none|| false- visibility:hidden' . "\r\n" . '			autoLink	: true,		    // 如果只有唯一选项则选中并联动下级' . "\r\n" . '			cache		: true,		    // ajax cache' . "\r\n" . '			defVal		: [],			// 默认选择项可多级' . "\r\n" . '			data		: null,' . "\r\n" . '			head		: \'请选择..\',   // {str|\'\'|false} 自动添加第一个选择项,非字符串或false表示不使用' . "\r\n" . '			level		: 20,			// 限定层级防止死循环' . "\r\n" . '			loaderImg	: \'Images/wait.gif\',' . "\r\n" . '			loader_duration: 100,		// loaderImg show/hide()动画持续时间' . "\r\n" . '			root		: [],			// 根所在位置,决定获取数据入口.不适用于ajax模式' . "\r\n" . '			minWidth	: 120,' . "\r\n" . '			maxWidth	: 300,' . "\r\n" . '			fixWidth	: 0,		    // fix <select> width' . "\r\n" . '			select		: [],			// [ [\'selector\', defValue], [] .. ] || \'selector\'' . "\r\n" . '			selClass	: \'LinkageSel\',	// 应用于自动创建的<select> class. 若初始化之前就存在的<select>会自动添加上' . "\r\n" . '			selStyle	: \'\',' . "\r\n" . '			onChange	: false,	    // callback function when change' . "\r\n" . '			trigger		: true,	        // onChange时是否触发用户自定义回调函数，配合 instance.changeValues()' . "\r\n" . '			triggerValues: [],	        // changeValues使用的数据属组' . "\r\n" . '			err			: false,		// 保存出错信息供debug' . "\r\n" . '			dataReader	: {}			// 数据结构键名' . "\r\n" . '	};' . "\r\n" . '	' . "\r\n" . '	if(opts && typeof opts === \'object\') {  ' . "\r\n" . '		$.extend(this.st, opts); ' . "\r\n" . '	}' . "\r\n" . '' . "\r\n" . '	if (! this.st.dataReader) {' . "\r\n" . '		this.st.dataReader = {			// 数据结构键名' . "\r\n" . '				id: \'id\',		        // 若不存在此键名则使用对象的序列值 ，同时影响ajax URL的查询字符串的键名	' . "\r\n" . '				name: \'name\',	        // 用于<optio>的text值' . "\r\n" . '				cell: \'cell\'	        // 子元素对象的键名' . "\r\n" . '			};' . "\r\n" . '	}' . "\r\n" . '	else {' . "\r\n" . '		(typeof this.st.dataReader.id === \'undefined\' || ! this.st.dataReader.id) && (this.st.dataReader.id = \'id\');' . "\r\n" . '		(typeof this.st.dataReader.name === \'undefined\' || ! this.st.dataReader.name) && (this.st.dataReader.name = \'name\');' . "\r\n" . '		(typeof this.st.dataReader.cell === \'undefined\' || ! this.st.dataReader.cell) && (this.st.dataReader.cell = \'cell\');' . "\r\n" . '	}' . "\r\n" . '' . "\r\n" . '	this.st.selClass = $.trim(this.st.selClass);' . "\r\n" . '	' . "\r\n" . '	//if ($.browser.msie && $.browser.version == \'6.0\') {' . "\r\n" . '	//	this.st.ie6 = true;' . "\r\n" . '	//}' . "\r\n" . '	if (/msie/.test(navigator.userAgent.toLowerCase())) {' . "\r\n" . '		if ($.browser && $.browser.version && $.browser.version == \'6.0\') {' . "\r\n" . '			this.st.ie6 = true;	// ie6' . "\r\n" . '		}' . "\r\n" . '		else if (!$.support.leadingWhitespace) {' . "\r\n" . '			this.st.ie6 = true;	// ie6-8! jQuery 1.9+' . "\r\n" . '		}' . "\r\n" . '	}' . "\r\n" . '' . "\r\n" . '	// 数据根 ajax get0时需要后台处理为获取DB第一级' . "\r\n" . '	this.data[0][this.st.dataReader.name] = \'root\';' . "\r\n" . '	this.data[0][this.st.dataReader.val] = 0;' . "\r\n" . '	this.data[0][this.st.dataReader.cell] = this.st.data;' . "\r\n" . '	' . "\r\n" . '	this.innerCallback = this.st.onChange;' . "\r\n" . '	/* 清空供用户在实例化之后再定义' . "\r\n" . '	 *  eg. var linkageSel = new LinkageSel(opts);' . "\r\n" . '	 *  linkageSel.onChange(function(instance) {' . "\r\n" . '	 *  	// do something' . "\r\n" . '	 *  	instance 为 instance' . "\r\n" . '	 *  });' . "\r\n" . '	 * ' . "\r\n" . '	 */ ' . "\r\n" . '	this.st.onChange = false;	' . "\r\n" . '	' . "\r\n" . '	' . "\r\n" . '	var loader = $(\'#linkagesel_loader\');' . "\r\n" . '	if (!loader || !loader[0]) {' . "\r\n" . '		$(document.body).append(\'<img id="linkagesel_loader" style="display: none; position: absolute;"  src="\' + ' . "\r\n" . '				encodeURI(this.st.loaderImg || \'wait.gif\') + \'" />\');' . "\r\n" . '		this.loader = $(\'#linkagesel_loader\') || null;' . "\r\n" . '	}' . "\r\n" . '	else {' . "\r\n" . '		this.loader = loader;' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	if (typeof this.st.select === \'string\') {		// selct: \'selector\'' . "\r\n" . '		this.st.select = [this.st.select];' . "\r\n" . '	}' . "\r\n" . '	else if (!isArray(this.st.select)) {' . "\r\n" . '		this.st.select = [];' . "\r\n" . '	}' . "\r\n" . '	// void else 	// select: [ \'selctor1\', \'selctor2\' ]' . "\r\n" . '	' . "\r\n" . '	if ( isNumber(this.st.defVal) ) {' . "\r\n" . '		this.st.defVal = [this.st.defVal];' . "\r\n" . '	}' . "\r\n" . '	else if (! isArray(this.st.defVal)) {' . "\r\n" . '		this.st.defVal = [];' . "\r\n" . '	}' . "\r\n" . '	// void [n1, n2]' . "\r\n" . '	' . "\r\n" . '	if (isNumber(this.st.root)  || ! isNaN(+this.st.root)) {' . "\r\n" . '		this.st.root = [this.st.root];' . "\r\n" . '	}' . "\r\n" . '	else if (!isArray(this.st.root)) {' . "\r\n" . '		this.st.root = [];' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	var selLen = this.st.select.length;' . "\r\n" . '	if (selLen < 1) {' . "\r\n" . '		alert(\'没有对象被绑定到mLinkageSel()!\');' . "\r\n" . '		return false;' . "\r\n" . '	}' . "\r\n" . '	for (var i = 0; i < selLen; i++) {' . "\r\n" . '		this.bind((this.st.select)[i]);' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	selLen = opts = loader = null;' . "\r\n" . '	' . "\r\n" . '	this.clean(0);' . "\r\n" . '	// this.fill(0, this.st.select[0][1]); // 生成第一个下拉内容' . "\r\n" . '	this.fill(0, this.st.defVal[0]); // 生成第一个下拉内容' . "\r\n" . '	' . "\r\n" . '	this.outer = {' . "\r\n" . '		// @todo 判断元素是否已绑定' . "\r\n" . '		' . "\r\n" . '		// @todo' . "\r\n" . '		// appendData: function() {},' . "\r\n" . '		' . "\r\n" . '		/**' . "\r\n" . '		 * 手动改变选单值,可选触发onchange回调函数' . "\r\n" . '		 * @param {int|Array}	一级或者多级选单值' . "\r\n" . '		 * @param {bool}		是否触发用户自定义onchange回调函数, 默认TRUE' . "\r\n" . '		 */' . "\r\n" . '		changeValues: function(parm, change) {' . "\r\n" . '			//window.setTimeout(that._changeValues, 2000, parm, change, that);	// FIX 当表单中动态更新linkageSel并且 .dialog(\'open\')时FF下页面闪动' . "\r\n" . '			that._changeValues(parm, change); // 2parm?' . "\r\n" . '			return this;' . "\r\n" . '		},' . "\r\n" . '		' . "\r\n" . '		' . "\r\n" . '		/**' . "\r\n" . '		 * 获得select选择value' . "\r\n" . '		 * @param {int} idx[option]<p>' . "\r\n" . '		 *  不带参数: 获得联动select中\'最后一个\'有选择<select>的选择值' . "\r\n" . '		 *  idx >= 0	: 获得第 idx 个菜单(从0开始)选择值' . "\r\n" . '		 * 		如果都无有选择则返回 null' . "\r\n" . '		 * </p>' . "\r\n" . '		 * ' . "\r\n" . '		 * return {int|null}	null: 从未选择任何,处于初始化状态' . "\r\n" . '		 */' . "\r\n" . '		getSelectedValue: function(idx) {' . "\r\n" . '			return that._getSelectedValue(idx);' . "\r\n" . '		},' . "\r\n" . '' . "\r\n" . '		// 返回数组包含所有select选择值' . "\r\n" . '		getSelectedArr: function() {' . "\r\n" . '			return that._getSelectedArr();' . "\r\n" . '		},' . "\r\n" . '		' . "\r\n" . '		' . "\r\n" . '		/**' . "\r\n" . '		 * 获得第bindIdx级（从0开始）菜单所选项目的所有值的数据对象' . "\r\n" . '		 * ' . "\r\n" . '		 * @param {str} key 返回指定键名的值' . "\r\n" . '		 * @param {int} bindIdx[option]<p>' . "\r\n" . '		 * 	空则返回当前最后一个有选择项选单的选项项值对象包' . "\r\n" . '		 * 	</p>' . "\r\n" . '		 * ' . "\r\n" . '		 * @return {instance|str|null}<p>' . "\r\n" . '		 *  未指定key返回整个对象: ' . "\r\n" . '		 *  {\'name\': 名称' . "\r\n" . '		 *   \'val\': 值' . "\r\n" . '		 *   \'others\': 其他值' . "\r\n" . '		 *  }' . "\r\n" . '		 *  指定key返回对象关联值: instance[key]' . "\r\n" . '		 *  无数据、数据对象无指定key、指定<select>无选择,返回null' . "\r\n" . '		 *  </p>' . "\r\n" . '		 */' . "\r\n" . '		getSelectedData: function(key, bindIdx) {' . "\r\n" . '			return that._getSelectedData(key, bindIdx);' . "\r\n" . '		},' . "\r\n" . '		' . "\r\n" . '		' . "\r\n" . '		/*' . "\r\n" . '		 * 获得所有有选择菜单的数据对象或对象值,遇到第一个未选择的停止' . "\r\n" . '		 * @param {str} key[option]	可选数据对象key' . "\r\n" . '		 * @return {array}<p>' . "\r\n" . '		 *  array记录格式' . "\r\n" . '		 *  	如果指定key则返回 data[key] 对应值: int|str|null' . "\r\n" . '		 *  	如果未指定key返回数据对象data: obj|null' . "\r\n" . '		 * </p>' . "\r\n" . '		 */' . "\r\n" . '		getSelectedDataArr: function(key) {' . "\r\n" . '			return that._getSelectedDataArr(key);' . "\r\n" . '		},' . "\r\n" . '		' . "\r\n" . '		' . "\r\n" . '		onChange: function(callback) {' . "\r\n" . '			if (callback && typeof callback === \'function\')	{' . "\r\n" . '				that.st.onChange = callback;' . "\r\n" . '			}' . "\r\n" . '			return this;' . "\r\n" . '		},' . "\r\n" . '		' . "\r\n" . '		' . "\r\n" . '		// 回复到初始状态' . "\r\n" . '		reset: function () {' . "\r\n" . '			that._reset();' . "\r\n" . '			return this;' . "\r\n" . '		},' . "\r\n" . '		' . "\r\n" . '		// 回复到初始状态,包括默认选择项及默认数据' . "\r\n" . '		resetAll: function() {' . "\r\n" . '			that._reset(true);' . "\r\n" . '			return this;' . "\r\n" . '		}' . "\r\n" . '	};' . "\r\n" . '	' . "\r\n" . '	return this.outer;' . "\r\n" . '	' . "\r\n" . '};' . "\r\n" . '' . "\r\n" . '' . "\r\n" . 'LinkageSel.prototype.bind = function(selector) {' . "\r\n" . '	var that = this,' . "\r\n" . '		st = this.st,' . "\r\n" . '		bindEls = this.bindEls,' . "\r\n" . '		bindIdx = bindEls.length || 0,	// 当前被添加对象的index' . "\r\n" . '		defValue = st.defVal && st.defVal[bindIdx] || null,' . "\r\n" . '		elm;' . "\r\n" . '	' . "\r\n" . '	if (!selector) {' . "\r\n" . '		return false;' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	if (typeof selector === \'string\') {' . "\r\n" . '		elm = jQuery(selector).eq(0);' . "\r\n" . '	}' . "\r\n" . '	else if (typeof selector === \'object\') {' . "\r\n" . '		elm = selector.jquery ? selector.eq(0) : jQuery(selector).eq(0);' . "\r\n" . '	}' . "\r\n" . '	if (!elm[0] || !elm.is(\'select\')) {' . "\r\n" . '		return false;' . "\r\n" . '	}' . "\r\n" . '' . "\r\n" . '	st.selClass && (! elm.hasClass(st.selClass)) && elm.addClass(st.selClass);' . "\r\n" . '	' . "\r\n" . '	// 将绑定的元素放入数组' . "\r\n" . '	bindEls.push({' . "\r\n" . '		obj		: elm,' . "\r\n" . '		value	: defValue,' . "\r\n" . '		defValue: defValue' . "\r\n" . '	});' . "\r\n" . '		' . "\r\n" . '	elm.data(\'bindIdx\', bindIdx)	// 在DOM元素上保存index值,和bindEls中对应' . "\r\n" . '	.change(that, function(e) {				// 当前对象绑定事件，change时清空下级select接着生成或填充' . "\r\n" . '		// e.stopPropagation();' . "\r\n" . '		// e.preventDefault();' . "\r\n" . '		// console.log(that);' . "\r\n" . '		var st = that.st,' . "\r\n" . '			bindEls = that,' . "\r\n" . '			bindIdx = jQuery(this).data(\'bindIdx\'),' . "\r\n" . '			nextEl = bindEls[bindIdx+1] && bindEls[bindIdx+1].obj || null,' . "\r\n" . '			selected_value = null;' . "\r\n" . '		' . "\r\n" . '		if (!nextEl || !nextEl.find(\'option\').length ) {	// 第一次生成' . "\r\n" . '			selected_value = st.defVal && st.defVal[bindIdx + 1] || null;' . "\r\n" . '		}' . "\r\n" . '		that.clean(bindIdx);' . "\r\n" . '		that.fill(bindIdx + 1, selected_value);' . "\r\n" . '	});' . "\r\n" . '	' . "\r\n" . '	if (elm.is(\':visible\')) {' . "\r\n" . '		this.setWidth(elm);	// 先初始化\'静态sel\'默认宽度改善页面显示效果,等填充了内容后再判断一次' . "\r\n" . '	}' . "\r\n" . '' . "\r\n" . '	// 未加载js本地数据则对一级做一次更新' . "\r\n" . '	bindIdx == 0 && ! st.data && elm.change();' . "\r\n" . '	' . "\r\n" . '	return true;' . "\r\n" . '};' . "\r\n" . '	' . "\r\n" . '	' . "\r\n" . '	// 创建select对象,供动态创建下级菜单' . "\r\n" . 'LinkageSel.prototype.creatSel = function(bindIdx, callback) {' . "\r\n" . '	var st = this.st,' . "\r\n" . '		bindEls = this.bindEls,' . "\r\n" . '		str = \'\';' . "\r\n" . '	' . "\r\n" . '	if (bindIdx <= 0) {' . "\r\n" . '		return false;' . "\r\n" . '	}' . "\r\n" . '	if (bindIdx >= st.level) {' . "\r\n" . '		this.custCallback();		// 超限最后触发一次' . "\r\n" . '		return false;' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	var id = \'linkagesel_\' + (\'\'+Math.random()).slice(-6),' . "\r\n" . '		str = \'<select id="\' + id + \'" style="display: none;\'  + st.selStyle + \'" class="\' + st.selClass + \'" ></select>\',' . "\r\n" . '		elm = bindEls[bindIdx - 1][\'obj\'].after(str);' . "\r\n" . '	' . "\r\n" . '	st.select.push( [\'#\' + id] );		// 保存新条目' . "\r\n" . '	this.bind( \'#\' + id );			// 绑定新生成的select对象' . "\r\n" . '	' . "\r\n" . '	if (typeof callback === \'function\') {' . "\r\n" . '		callback(bindIdx, this);' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	return true;' . "\r\n" . '};' . "\r\n" . '' . "\r\n" . '' . "\r\n" . '	' . "\r\n" . '/**' . "\r\n" . ' * 生成option填充select' . "\r\n" . ' * @param {int} bindIdx	bindEls属组索引值' . "\r\n" . ' * @param {int|array} selValue	匹配selected条目的值, 但函数内优先使用st.triggerValues[bindIdx]的值' . "\r\n" . ' */' . "\r\n" . 'LinkageSel.prototype.fill = function (bindIdx, selValue) {' . "\r\n" . '	var bindEls = this.bindEls,' . "\r\n" . '		st = this.st,' . "\r\n" . '		head = st.head,' . "\r\n" . '		data = this.getData(bindIdx),' . "\r\n" . '		tarr = [],' . "\r\n" . '		bindEl,' . "\r\n" . '		elm,' . "\r\n" . '		row,' . "\r\n" . '		recycle = this.recycle,' . "\r\n" . '		recycleLen = recycle.length || 0;' . "\r\n" . '	' . "\r\n" . '	this.setLoader(false);' . "\r\n" . '	if (bindIdx >= st.level) {' . "\r\n" . '		this.custCallback();' . "\r\n" . '		return false;' . "\r\n" . '	}' . "\r\n" . '	//console.log([999, bindIdx, selValue]);' . "\r\n" . '' . "\r\n" . '	if (st.triggerValues.length) {		// changeSelectedValue()函数调用到这儿' . "\r\n" . '		selValue = st.triggerValues[bindIdx] || null;	// 不使用shift()!! 涉及到remote' . "\r\n" . '	}' . "\r\n" . '	else {								// 普通调用' . "\r\n" . '		selValue = typeof selValue !== \'undefined\' && selValue !== \'\' ? selValue : null;	// select默认值' . "\r\n" . '	}' . "\r\n" . '' . "\r\n" . '	// 触发事件的(上级)select无值或空值则不操作直接跳过' . "\r\n" . '	if ( bindIdx > 0 && (bindEls[bindIdx - 1].value === null || bindEls[bindIdx - 1].value === \'\') ) {' . "\r\n" . '		//console.log([bindIdx, bindEls[bindIdx -1]]);' . "\r\n" . '		bindEl = bindEls[bindIdx] || {};' . "\r\n" . '		elm = bindEl[\'obj\'];' . "\r\n" . '		if (elm && elm[0] && st.autoHide) {' . "\r\n" . '			st.hideWidth && elm.hide() || elm.css(\'visibility\', \'hidden\');' . "\r\n" . '		}' . "\r\n" . '		st = bindEls = data = null;' . "\r\n" . '		this.custCallback();' . "\r\n" . '		this.resetTrigger(true);	// 还原默认， 顺序!' . "\r\n" . '		return;' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	if (data === false) {	// false: ajax尝试无值,以后不再尝试' . "\r\n" . '		this.clean(bindIdx - 1);' . "\r\n" . '		// change事件到底触发用户定义change事件回调函数' . "\r\n" . '		this.custCallback();' . "\r\n" . '		this.resetTrigger(true);	// 还原默认， 顺序!' . "\r\n" . '		return;' . "\r\n" . '	}' . "\r\n" . '	else if (data === null) {	// null: 无值,可ajax获取' . "\r\n" . '		// this.clean(bindIdx - 1);	// 不需要' . "\r\n" . '		if (st.url || st.ajax) {	// getjson|ajax get' . "\r\n" . '			this.getRemoteData(bindIdx - 1, function(idx, inst) {	// instance为实例对象' . "\r\n" . '				typeof inst.bindEls[idx] === \'undefined\' && inst.creatSel(idx);' . "\r\n" . '				var defValue = inst.bindEls[idx] && inst.bindEls[idx].defValue || null;' . "\r\n" . '				inst.fill(idx, defValue);' . "\r\n" . '				// inst.custCallback();	// 不需要' . "\r\n" . '			});' . "\r\n" . '		}' . "\r\n" . '		else {' . "\r\n" . '			this.custCallback();' . "\r\n" . '			this.resetTrigger(true);	// 还原默认， 顺序!' . "\r\n" . '		}' . "\r\n" . '		st = bindEls = null;' . "\r\n" . '		return;' . "\r\n" . '	}' . "\r\n" . '	else if (data && typeof data === \'object\') {	// 有数据' . "\r\n" . '		if (bindEls.length - 1 < bindIdx) {	// select不存在但存在待生成数据' . "\r\n" . '//			this.creatSel(bindIdx, function(bindIdx, thisElm) {' . "\r\n" . '//				thisElm.fill(bindIdx);' . "\r\n" . '//			});' . "\r\n" . '			this.creatSel(bindIdx);' . "\r\n" . '		}' . "\r\n" . '		bindEl = bindEls[bindIdx] || {};' . "\r\n" . '		elm = bindEl.obj;' . "\r\n" . '		if (! elm || ! elm[0]) {' . "\r\n" . '			return;' . "\r\n" . '		}' . "\r\n" . '		// elm.width(\'\');' . "\r\n" . '			' . "\r\n" . '		if (head || typeof head === \'string\') {' . "\r\n" . '			head = \'<option value="">\' + head + \'</option>\';' . "\r\n" . '		}' . "\r\n" . '		' . "\r\n" . '		// 开始生成 <option>' . "\r\n" . '		var tOption,' . "\r\n" . '			index = 1,' . "\r\n" . '			selectedIdx = 0,' . "\r\n" . '			name = st.dataReader.name,' . "\r\n" . '			id = st.dataReader.id;' . "\r\n" . '' . "\r\n" . '		for (var x in data) {' . "\r\n" . '			if (! data.hasOwnProperty(x)) { continue; }' . "\r\n" . '			row = data[x];' . "\r\n" . '			// 若有id键则使用id键的值作为sequence' . "\r\n" . '			typeof row[id] !== \'undefined\' && row[id] && (x = row[id]);' . "\r\n" . '			' . "\r\n" . '			if (recycleLen > 0) {' . "\r\n" . '				tOption = recycle.pop();' . "\r\n" . '				if (typeof tOption === \'object\') { ' . "\r\n" . '					//tOption = jQuery(tOption).val(x).text(row.name).removeAttr(\'selected\').get(0) ;		// for jQuery pre 1.6' . "\r\n" . '					tOption = jQuery(tOption).val(x).text(row[name]).prop(\'selected\', false).get(0) ;	// for jQuery 1.6+' . "\r\n" . '				}' . "\r\n" . '				else {' . "\r\n" . '					tOption = jQuery(\'<option>\').val(x).text(row[name]).get(0);' . "\r\n" . '				}' . "\r\n" . '				recycleLen--;' . "\r\n" . '			}' . "\r\n" . '			else {' . "\r\n" . '				tOption = jQuery(\'<option>\').val(x).text(row[name]).get(0) ;' . "\r\n" . '			}' . "\r\n" . '			tarr.push(tOption);' . "\r\n" . '			' . "\r\n" . '			if (selValue !== null && selValue == x) {' . "\r\n" . '				selectedIdx = index;' . "\r\n" . '			}' . "\r\n" . '			index++;' . "\r\n" . '		}' . "\r\n" . '		row = tOption = null;' . "\r\n" . '		' . "\r\n" . '		if (st.autoLink && index === 2) {		// 只有一个选项的直接选中 并且联动下级' . "\r\n" . '			selectedIdx--;	// !' . "\r\n" . '			bindEl.value = x;' . "\r\n" . '			elm.append(tarr).show().css(\'visibility\', \'\');' . "\r\n" . '			setTimeout(function(){' . "\r\n" . '				elm.change();	// 手动触发以便生成下级菜单 不延迟无法触发' . "\r\n" . '			}, 0);' . "\r\n" . '		}' . "\r\n" . '		else {' . "\r\n" . '			elm.append(head).append(tarr).css(\'visibility\', \'\').show();	// jQuery.append 可接受DOM数组参数' . "\r\n" . '			if (selValue && ! st.ie6) {	// ie6在下方触发?' . "\r\n" . '				setTimeout(function(){' . "\r\n" . '					elm.change();	// 有默认选择值即触发' . "\r\n" . '				}, 0);' . "\r\n" . '			}' . "\r\n" . '			// 第一级不执行用户定义回调函数' . "\r\n" . '			bindIdx && this.custCallback();' . "\r\n" . '		}' . "\r\n" . '		tarr = recycle = null;' . "\r\n" . '		' . "\r\n" . '		if (! st.ie6) {' . "\r\n" . '			typeof elm[0].options[selectedIdx] === \'object\' && (elm[0].options[selectedIdx].selected = true);' . "\r\n" . '		}' . "\r\n" . '		else {' . "\r\n" . '			setTimeout(function(){' . "\r\n" . '				typeof elm[0].options[selectedIdx] === \'object\' && (elm[0].options[selectedIdx].selected = true);' . "\r\n" . '				if (selValue) {		// ie6' . "\r\n" . '					elm.change();' . "\r\n" . '				}' . "\r\n" . '			}, 0);	' . "\r\n" . '		}' . "\r\n" . '		this.setWidth(elm);' . "\r\n" . '	}' . "\r\n" . '	st = bindEls = data = bindEl = null;' . "\r\n" . '};' . "\r\n" . '' . "\r\n" . '' . "\r\n" . '/**' . "\r\n" . ' * 查找数据入口,用于用户自定义root设置' . "\r\n" . ' * @return {obj}' . "\r\n" . ' */' . "\r\n" . 'LinkageSel.prototype.findEntry = function(data) {' . "\r\n" . '	var st = this.st,' . "\r\n" . '		root = st.root,' . "\r\n" . '		len = root && root.length || 0;' . "\r\n" . '	' . "\r\n" . '	if (data && len) {	// 有定义默认数据入口' . "\r\n" . '		for (var i = 0; i < len; i++) {' . "\r\n" . '			if (! root[i] || ! data[root[i]] || ! data[root[i]][st.dataReader.cell]) {	// 只要出现即终止' . "\r\n" . '				break;' . "\r\n" . '			}' . "\r\n" . '			else {' . "\r\n" . '				data = data[ root[i] ][st.dataReader.cell];' . "\r\n" . '			}' . "\r\n" . '		}' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	return data;' . "\r\n" . '};' . "\r\n" . '' . "\r\n" . '' . "\r\n" . '/**' . "\r\n" . ' * 获得该级菜单数据,路径为上级菜单数据.cell' . "\r\n" . ' * 对于顶级菜单 bindIdx==-1(getRemoteData调用)时也能正常处理,并且可以自定义入口位置' . "\r\n" . ' * @param {int} bindIdx	菜单对象在 bindEls属组中索引值' . "\r\n" . ' * @return {Object||null||false} <p>' . "\r\n" . ' * 		Object	: 有值 { "id1":{ name: \'xx\', val: \'xx\', cell:{}}, "id2":{ name: \'xx\', val: \'xx\', cell:{}}  }' . "\r\n" . ' * 		null	: 无值,如果定义ajax属性则通过getjson获取' . "\r\n" . ' * 		false	: 上级菜单选中项目无下级条目(无需通过ajajx继续获取值);' . "\r\n" . ' * ' . "\r\n" . ' */' . "\r\n" . 'LinkageSel.prototype.getData = function(bindIdx) {' . "\r\n" . '	var st = this.st,' . "\r\n" . '		bindEls = this.bindEls,' . "\r\n" . '		data = this.data[0][st.dataReader.cell],' . "\r\n" . '		len = bindEls.length,' . "\r\n" . '		pValue,' . "\r\n" . '		key;' . "\r\n" . '	' . "\r\n" . '	if (typeof bindIdx === \'undefined\' || bindIdx >= st.level) {' . "\r\n" . '		return false;' . "\r\n" . '	}' . "\r\n" . '	if (bindIdx == -1) {	// 无本地数据定义,ajax获取包括第一级菜单首次加载时' . "\r\n" . '		return this.data;	// 返回根' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	data = this.findEntry(data);	// ajax模式时不使用入口功能' . "\r\n" . '	' . "\r\n" . '	for (var i = 1; i <= bindIdx; i++ ) {// 跳过bindIdx==0/-1的情况' . "\r\n" . '		pValue = bindEls[i-1].value;' . "\r\n" . '		if (pValue && data && data[pValue]) {	// \'data[pValue] &&\' 避免 root值和默认值无法组成正确路径!' . "\r\n" . '			if (data[pValue][st.dataReader.cell] === false) {' . "\r\n" . '				data = false;' . "\r\n" . '			}' . "\r\n" . '			else {' . "\r\n" . '				data = data[pValue][st.dataReader.cell] || null;' . "\r\n" . '			}' . "\r\n" . '		}' . "\r\n" . '		else {' . "\r\n" . '			data = false;	// 阻止继续尝试,包括ajax尝试' . "\r\n" . '			break;' . "\r\n" . '		}' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	st = bindEls = null;' . "\r\n" . '	return data;' . "\r\n" . '};' . "\r\n" . '	' . "\r\n" . '' . "\r\n" . 'LinkageSel.prototype.getRemoteData = function(pBindIdx, callback) {' . "\r\n" . '	var $ = jQuery,' . "\r\n" . '		that = this,' . "\r\n" . '		st = this.st,' . "\r\n" . '		bindEls = this.bindEls,' . "\r\n" . '		bindValue = pBindIdx >= 0 ? bindEls[pBindIdx].value : 0,	// 第一级菜单无内容则0' . "\r\n" . '		data,' . "\r\n" . '		dv,' . "\r\n" . '		cell,' . "\r\n" . '		cache = st.cache ? true : false;' . "\r\n" . '	' . "\r\n" . '	if (pBindIdx >= st.level) {' . "\r\n" . '		return false;' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	// 先获得上级菜单data路径 包括pBindIdx==-1情况' . "\r\n" . '	data = this.getData(pBindIdx);' . "\r\n" . '	dv = data[bindValue];' . "\r\n" . '	if (! dv || typeof dv !== \'object\'  || dv[st.dataReader.cell] === false) {	// cell===false已经尝试过无数据,直接退出' . "\r\n" . '		this.setLoader(false);' . "\r\n" . '		this.custCallback();' . "\r\n" . '		this.resetTrigger(true);' . "\r\n" . '		return false;' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	// 计算items元素个数' . "\r\n" . '	var itemCount = 0;' . "\r\n" . '	for (var x in data) {' . "\r\n" . '		if (+x > 0) {' . "\r\n" . '			itemCount++;' . "\r\n" . '			break;	// only one calc' . "\r\n" . '		}' . "\r\n" . '	}' . "\r\n" . '	if (st.ajax) {' . "\r\n" . '		var settings = {' . "\r\n" . '			cache	: cache,' . "\r\n" . '			type	: \'GET\',' . "\r\n" . '			dataType: \'json\',' . "\r\n" . '			mode	: \'abort\',' . "\r\n" . '			context	: that,' . "\r\n" . '			beforeSend: function() {' . "\r\n" . '				this.setLoader(pBindIdx + 1);	' . "\r\n" . '			},' . "\r\n" . '			success	: function(resp) {' . "\r\n" . '				var that = this,' . "\r\n" . '					loader_duration = that.loader_duration + 20;' . "\r\n" . '' . "\r\n" . '				setTimeout(function(){' . "\r\n" . '					that.setLoader(false);' . "\r\n" . '				}, loader_duration);' . "\r\n" . '				' . "\r\n" . '' . "\r\n" . '				// 后台变量是以非零id为数字key的数组(默认情况), 或非数字键名数组 ,则json_encode()返回json格式str,可以直接转化为json' . "\r\n" . '				// 若后台变量是以0开始连续数字key数组, 则返回的是数组格式,不能直接转化json' . "\r\n" . '				if (resp && typeof resp === \'object\' && ! isArray(resp) ) {' . "\r\n" . '					dv[st.dataReader.cell] = resp;' . "\r\n" . '					callback(pBindIdx + 1, this);	// 有数据才回调,防止展开到底之后仍旧不断触发ajax' . "\r\n" . '				}' . "\r\n" . '				else {' . "\r\n" . '					if (dv[st.dataReader.cell] === null) {	// 已经尝试过' . "\r\n" . '						dv[st.dataReader.cell] = false;	// false 以后不再尝试' . "\r\n" . '					}' . "\r\n" . '					else {' . "\r\n" . '						dv[st.dataReader.cell] = null;	// 标记已尝试' . "\r\n" . '					}' . "\r\n" . '					that.custCallback();	// 无数据才回调用户函数' . "\r\n" . '					that.resetTrigger(true);' . "\r\n" . '				}' . "\r\n" . '			},' . "\r\n" . '			complete : function() {' . "\r\n" . '				this.setLoader(false);' . "\r\n" . '			}' . "\r\n" . '		};' . "\r\n" . '		if (st.mvcQuery) {' . "\r\n" . '			settings.url = st.ajax + \'/\' + bindValue;' . "\r\n" . '		}' . "\r\n" . '		else {' . "\r\n" . '			settings.url = st.ajax;' . "\r\n" . '			settings.data = {};' . "\r\n" . '			settings.data[st.dataReader.id] = bindValue;' . "\r\n" . '		}' . "\r\n" . '' . "\r\n" . '		$.ajax(settings);' . "\r\n" . '	} ' . "\r\n" . '	else if(st.url) {' . "\r\n" . '		$.getJSON(st.url , function(resp) {' . "\r\n" . '			that.setLoader(false);' . "\r\n" . '			if (resp && typeof resp === \'object\' && !isArray(resp) ) {' . "\r\n" . '				dv[st.dataReader.cell] = resp;' . "\r\n" . '				st.url = \'\';	// 有数据则只读一次' . "\r\n" . '				callback(pBindIdx + 1, that);' . "\r\n" . '			}' . "\r\n" . '			else {' . "\r\n" . '				if (dv[st.dataReader.cell] === null) {' . "\r\n" . '					dv[st.dataReader.cell] = false;	' . "\r\n" . '				}' . "\r\n" . '				else {' . "\r\n" . '					dv[st.dataReader.cell] = null;' . "\r\n" . '					st.url = \'\';' . "\r\n" . '				}' . "\r\n" . '				that.custCallback();' . "\r\n" . '			}				' . "\r\n" . '		});' . "\r\n" . '	}' . "\r\n" . '};' . "\r\n" . '	' . "\r\n" . '	' . "\r\n" . 'LinkageSel.prototype._reset = function(type) {' . "\r\n" . '	var st = this.st,' . "\r\n" . '		bindEls = this.bindEls,' . "\r\n" . '		bindEl = bindEls[0] || {},' . "\r\n" . '		elm = bindEl.obj || null,' . "\r\n" . '		defValue = bindEl.defValue;' . "\r\n" . '	' . "\r\n" . '	if (elm) {' . "\r\n" . '		this.clean(0);' . "\r\n" . '		if (defValue) {	// 有默认值' . "\r\n" . '			//elm.find("option[value=\'" + defValue + "\']").eq(0).attr(\'selected\', true);' . "\r\n" . '			elm.find("option[value=\'" + defValue + "\']").eq(0).prop(\'selected\', true);	// for jQuery 1.6+' . "\r\n" . '			elm.change();' . "\r\n" . '		}' . "\r\n" . '		else {' . "\r\n" . '			//elm.attr(\'selectedIndex\', 0).change();' . "\r\n" . '			elm.prop(\'selectedIndex\', 0).change();' . "\r\n" . '		}' . "\r\n" . '		' . "\r\n" . '		if (type) {	// 数据也初始化' . "\r\n" . '			this.data[0][st.dataReader.cell] = st.data;' . "\r\n" . '			this.clean(0);' . "\r\n" . '			this.fill(0, st.select[0][1]); // 生成第一个下拉内容' . "\r\n" . '		}' . "\r\n" . '	}' . "\r\n" . '	st = bindEls = bindEl = elm = null;' . "\r\n" . '};' . "\r\n" . '	' . "\r\n" . '' . "\r\n" . '/**' . "\r\n" . ' * 如果设定隐藏选项,则隐藏所有下级菜单并清空' . "\r\n" . ' * 更新当前对象在bindEls中value值' . "\r\n" . ' * select宽度在每次fill之前会清空一次,生成内容后再计算宽度,避免border影响取值' . "\r\n" . ' */' . "\r\n" . 'LinkageSel.prototype.clean = function(bindIdx) {' . "\r\n" . '	var st = this.st,' . "\r\n" . '		bindEls = this.bindEls || [],' . "\r\n" . '		len = bindEls.length,' . "\r\n" . '		bindEl,' . "\r\n" . '		elm,' . "\r\n" . '		recycle = this.recycle,' . "\r\n" . '		topt;' . "\r\n" . '	' . "\r\n" . '	if (bindIdx < 0) { ' . "\r\n" . '		return false; ' . "\r\n" . '	}' . "\r\n" . '			' . "\r\n" . '	if (!len || bindIdx >= st.level) {' . "\r\n" . '		this.custCallback();' . "\r\n" . '		return false;' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	for (var i = len - 1; i > bindIdx; i--) {' . "\r\n" . '		bindEl = bindEls[i] || {};' . "\r\n" . '		elm = bindEl.obj;' . "\r\n" . '		if (elm[0] && elm.length) {	// ?length' . "\r\n" . '			//elm.empty().scrollTop(0);	// 重置scrollTop,否则jqueryUI.dialog会导致FF下模态窗口打开时页闪!' . "\r\n" . '			elm.scrollTop(0);' . "\r\n" . '			topt = elm.children();		' . "\r\n" . '			topt.remove();' . "\r\n" . '			//topt.length && ( jQuery.merge(recycle, topt.filter(\'option\').toArray()) ); // <optgroup label="">  ' . "\r\n" . '			topt.length && ( jQuery.merge(recycle, topt.filter(\'option\').toArray()) ); // <optgroup label="">  ' . "\r\n" . '			' . "\r\n" . '			if (st.autoHide) {' . "\r\n" . '				st.hideWidth && elm.hide() || elm.css(\'visibility\', \'hidden\');' . "\r\n" . '			}' . "\r\n" . '			if (st.fixWidth) {' . "\r\n" . '				elm.width(st.fixWidth);' . "\r\n" . '			}' . "\r\n" . '			else if (st.minWidth) {		// 有默认最小值则恢复' . "\r\n" . '				elm.width(st.minWidth);	// 不清空宽度则可能会越变越小' . "\r\n" . '			} ' . "\r\n" . '			bindEl.value = \'\';' . "\r\n" . '		}' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	// 更新当前对象值' . "\r\n" . '	bindEls[bindIdx] && bindEls[bindIdx].obj && (bindEls[bindIdx].value = bindEls[bindIdx].obj.val()); // 更新所选值,否则将无法联动' . "\r\n" . '	' . "\r\n" . '	st = bindEls = bindEl = elm = topt = null;' . "\r\n" . '	return true;' . "\r\n" . '};' . "\r\n" . '	' . "\r\n" . '' . "\r\n" . '/**' . "\r\n" . ' * 计算select宽度' . "\r\n" . ' * @param {obj} n 获得的元素宽度值' . "\r\n" . ' * @return {int|false}<p>' . "\r\n" . ' * 	false: 元素当前宽度在预设最小与最大值之间,' . "\r\n" . ' * 	需要清空元素当前已定义的宽度以便其使用自动宽度' . "\r\n" . ' * 	避免取值不精确导致边框宽度影响' . "\r\n" . ' * </p>' . "\r\n" . ' * ' . "\r\n" . ' */' . "\r\n" . 'LinkageSel.prototype.calcWidth = function(n) {' . "\r\n" . '	var st = this.st,' . "\r\n" . '		fixW = +st.fixWidth,' . "\r\n" . '		minW = +st.minWidth,' . "\r\n" . '		maxW = +st.maxWidth;' . "\r\n" . '' . "\r\n" . '	if (minW > 0 && maxW > 0) {' . "\r\n" . '		minW = Math.min(minW, maxW);' . "\r\n" . '		maxW = Math.max(minW, maxW);' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	if (fixW > 0) {	// 首先固定' . "\r\n" . '		n = fixW;' . "\r\n" . '	}' . "\r\n" . '	else if (minW > 0 && n < minW) {' . "\r\n" . '		n = minW;' . "\r\n" . '	}' . "\r\n" . '	else if (maxW > 0 && n > maxW) {' . "\r\n" . '		n = maxW;' . "\r\n" . '	}' . "\r\n" . '	else {' . "\r\n" . '		n = -1;	// 清空设定值,使用自动' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	st = null;' . "\r\n" . '	return n < 0 ? false : n;' . "\r\n" . '};' . "\r\n" . '	' . "\r\n" . '' . "\r\n" . '/**' . "\r\n" . ' * 设定宽度' . "\r\n" . ' * select宽度在每次fill之前会清空一次,生成内容后再计算宽度,避免border影响取值' . "\r\n" . ' * 不良影响是如果某条记录过长会先生成一个大宽度的select然后再缩小到maxWidth值' . "\r\n" . ' * 视觉上不理想' . "\r\n" . ' */' . "\r\n" . 'LinkageSel.prototype.setWidth = function(elm) {' . "\r\n" . '	if (!elm || !elm[0]) { return false; }' . "\r\n" . '	var w = this.calcWidth( elm.width() );' . "\r\n" . '	if (w === false) {' . "\r\n" . '		elm.width(\'\');	// 宽度在minWidth/maxWidth之间则清空宽度设置' . "\r\n" . '	}' . "\r\n" . '	else {' . "\r\n" . '		elm.width(w);' . "\r\n" . '	}' . "\r\n" . '};' . "\r\n" . '	' . "\r\n" . '	' . "\r\n" . '/**' . "\r\n" . ' * 在当前selsect后面显示,如果当前sel不存在则上级, 如果有下级sel则为下级 ajax loader显示位置' . "\r\n" . ' * @param {int} bindIdx|false 需要显示loader的select对象index, false则隐藏' . "\r\n" . ' */' . "\r\n" . 'LinkageSel.prototype.setLoader = function(bindIdx) {' . "\r\n" . '	var loader = this.loader;' . "\r\n" . '	if (! loader) {' . "\r\n" . '		return;' . "\r\n" . '	}' . "\r\n" . '	if (bindIdx === false) {' . "\r\n" . '		loader.offset({top: 0, left: 0}).hide();' . "\r\n" . '	}' . "\r\n" . '	else {' . "\r\n" . '		var bindEls = this.bindEls,' . "\r\n" . '			elm,' . "\r\n" . '			offset,' . "\r\n" . '			tmp,' . "\r\n" . '			width,' . "\r\n" . '			loader_duration = this.loader_duration;' . "\r\n" . '		' . "\r\n" . '		if (!bindEls) {' . "\r\n" . '			return;' . "\r\n" . '		}' . "\r\n" . '		' . "\r\n" . '		// 降序循环读取sel对象,取最后一个可见元素' . "\r\n" . '		for (var i = bindEls.length-1; i >= bindIdx; i--) {' . "\r\n" . '			tmp = bindEls[i] && bindEls[i].obj;' . "\r\n" . '			if (tmp && tmp.is(\':visible\')) {	// 最后一个可见元素' . "\r\n" . '				elm = tmp;' . "\r\n" . '				break;' . "\r\n" . '			}' . "\r\n" . '		}' . "\r\n" . '		if (!elm && bindIdx > 0) {' . "\r\n" . '			elm = bindEls[bindIdx - 1].obj;	// 没有合乎要求的则使用上一级元素作基准' . "\r\n" . '		}' . "\r\n" . '		' . "\r\n" . '		if (elm && elm.is(\':visible\')) {	// 外层隐藏时不loaderImg' . "\r\n" . '			offset = elm.offset();' . "\r\n" . '			width = elm.width();' . "\r\n" . '			// 必须先show()再offset 若顺序相反则offset值会自动翻倍!' . "\r\n" . '			//loader.show(350).offset({top: (parseInt(offset.top) + 3), left: (parseInt(offset.left + width + 5))});' . "\r\n" . '			loader.offset({top: (parseInt(offset.top) + 3), left: (parseInt(offset.left + width + 5))}).show(loader_duration);' . "\r\n" . '		}' . "\r\n" . '		else {' . "\r\n" . '			loader.hide(loader_duration).offset({top: 0, left: 0});' . "\r\n" . '		}' . "\r\n" . '		bindEls = elm = tmp = null;' . "\r\n" . '	}' . "\r\n" . '};' . "\r\n" . '	' . "\r\n" . '' . "\r\n" . '// 执行用户自定义change事件末回调函数' . "\r\n" . 'LinkageSel.prototype.custCallback = function() {' . "\r\n" . '	var st = this.st;' . "\r\n" . '	if (!st.trigger) { return;}' . "\r\n" . '	' . "\r\n" . '	if (this.innerCallback && typeof this.innerCallback === \'function\') {' . "\r\n" . '		this.innerCallback(this);		// 把实例对象传递给回调函数' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	if (st.onChange && typeof st.onChange === \'function\') {' . "\r\n" . '		st.onChange.apply(this.outer);		// outer回调函数中this即为实例对象' . "\r\n" . '	}' . "\r\n" . '};' . "\r\n" . '	' . "\r\n" . '' . "\r\n" . '//获得所有<select>选择值,包含空值' . "\r\n" . 'LinkageSel.prototype._getSelectedArr = function(n) {' . "\r\n" . '	var st = this.st,' . "\r\n" . '		bindEls = this.bindEls,' . "\r\n" . '		len = bindEls.length,' . "\r\n" . '		elm,' . "\r\n" . '		value,' . "\r\n" . '		arr = [];' . "\r\n" . '	' . "\r\n" . '	if (!len || n > len) {' . "\r\n" . '		return null;' . "\r\n" . '	}' . "\r\n" . '	n = n - 1;' . "\r\n" . '	if (!n) {	// 返回级联' . "\r\n" . '		for (var i = 0; i < len; i++) {' . "\r\n" . '			elm = bindEls[i] && bindEls[i].obj;' . "\r\n" . '			if (elm && elm[0]) {' . "\r\n" . '				arr.push(elm.val());	// 不做判断直接push' . "\r\n" . '			}' . "\r\n" . '			else {' . "\r\n" . '				arr = null;	// 出错全部清除' . "\r\n" . '				st.err = \'_getSelectedArr: !elm\';' . "\r\n" . '				break;' . "\r\n" . '			}' . "\r\n" . '		}' . "\r\n" . '	}' . "\r\n" . '	else {	// 单个' . "\r\n" . '		elm = bindEls[i] && bindEls[i].obj;' . "\r\n" . '		value = elm && elm[0] && elm.val();' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	st = bindEls = elm = null;' . "\r\n" . '	return (arr && arr.length > 0) ? arr : null;' . "\r\n" . '};' . "\r\n" . '' . "\r\n" . '' . "\r\n" . '// 获得最后一个或者指定idx(0开始)有效选择项值' . "\r\n" . 'LinkageSel.prototype._getSelectedValue = function(idx) {' . "\r\n" . '	var arr = this._getSelectedArr(idx),' . "\r\n" . '		len = arr.length,' . "\r\n" . '		value = null,' . "\r\n" . '		v;' . "\r\n" . '	if (!arr || !len) {' . "\r\n" . '		return null;' . "\r\n" . '	}' . "\r\n" . '	if (!idx) {' . "\r\n" . '		for (var i = 0; i < len; i++) {' . "\r\n" . '			v = arr[i];' . "\r\n" . '			if (v || v === 0 || v === \'0\' ) {' . "\r\n" . '				value = v;' . "\r\n" . '			}' . "\r\n" . '			else {' . "\r\n" . '				break;' . "\r\n" . '			}' . "\r\n" . '		}' . "\r\n" . '	}' . "\r\n" . '	else {	// 返回指定位置' . "\r\n" . '		value = arr[idx];' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	return value;' . "\r\n" . '};' . "\r\n" . '' . "\r\n" . '' . "\r\n" . '// 获得第bindIdx级（从0开始）菜单所选项目的所有值的数据对象' . "\r\n" . 'LinkageSel.prototype._getSelectedData = function(key, bindIdx) {' . "\r\n" . '	var st = this.st,' . "\r\n" . '		res = {},' . "\r\n" . '		bindEls = this.bindEls,' . "\r\n" . '		data = this.data[0][st.dataReader.cell],' . "\r\n" . '		dc,' . "\r\n" . '		len,' . "\r\n" . '		pos,' . "\r\n" . '		valueArr,' . "\r\n" . '		value;' . "\r\n" . '	' . "\r\n" . '	// 小于0或者不是数字,直接返回' . "\r\n" . '	if (bindIdx && isNaN(bindIdx) || bindIdx < 0  ) {' . "\r\n" . '		return null;' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	// 先获得所有select选择值然后逐步搜索data,直到遇到第一个select空值' . "\r\n" . '	valueArr = this._getSelectedArr();' . "\r\n" . '	data = this.findEntry(data);' . "\r\n" . '	len = valueArr.length;' . "\r\n" . '	pos = bindIdx == null || bindIdx === \'\' ? len : bindIdx + 1;	// bindIdx+1!' . "\r\n" . '	' . "\r\n" . '	if (!len || !data || pos === null) {' . "\r\n" . '		return null;' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	for (var i = 0; i < pos; i++) {' . "\r\n" . '		value = valueArr[i];' . "\r\n" . '		if (value !== \'\' && value != null ) {' . "\r\n" . '			if (data[value]) {' . "\r\n" . '				dc = data[value];' . "\r\n" . '				data = data[value][st.dataReader.cell];' . "\r\n" . '			}' . "\r\n" . '			else {' . "\r\n" . '				dc = null;' . "\r\n" . '				break;' . "\r\n" . '			}' . "\r\n" . '		}' . "\r\n" . '		else if (bindIdx >= 0) {	// 指定了位置,此路不通返回null' . "\r\n" . '			dc = null;' . "\r\n" . '			break;' . "\r\n" . '		}' . "\r\n" . '		else {		// 最后一个有效选择' . "\r\n" . '			break;	// 遇到第一个无选择的跳出,数据路径为上次循环的位置' . "\r\n" . '		}' . "\r\n" . '	}' . "\r\n" . '	data = null;' . "\r\n" . '	' . "\r\n" . '	if (dc === null) {' . "\r\n" . '		res = null;' . "\r\n" . '	}' . "\r\n" . '	else {' . "\r\n" . '		for (var x in dc) {' . "\r\n" . '			if (dc.hasOwnProperty(x) && x !== [st.dataReader.cell]) {' . "\r\n" . '				res[x] = dc[x];' . "\r\n" . '			}' . "\r\n" . '		}' . "\r\n" . '		res =  key ? res[key] : res;' . "\r\n" . '	}' . "\r\n" . '' . "\r\n" . '	dc = bindEls = valueArr = null;' . "\r\n" . '	return res;' . "\r\n" . '};' . "\r\n" . '' . "\r\n" . '' . "\r\n" . '// 获得所有有选择菜单的数据对象或对象值,遇到第一个未选择的停止' . "\r\n" . 'LinkageSel.prototype._getSelectedDataArr = function(key) {' . "\r\n" . '	var bindEls = this.bindEls,' . "\r\n" . '		len = bindEls.length,' . "\r\n" . '		data,' . "\r\n" . '		res = [];' . "\r\n" . '	if (!len) { return null; }' . "\r\n" . '	' . "\r\n" . '	for (var i = 0; i < len; i++) {' . "\r\n" . '		data = this._getSelectedData(key, i);' . "\r\n" . '		if (data == null) {' . "\r\n" . '			break;' . "\r\n" . '		}' . "\r\n" . '		res[i] = data;' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	data = bindEls = null;' . "\r\n" . '	return res;' . "\r\n" . '};' . "\r\n" . '' . "\r\n" . '' . "\r\n" . '// 改变菜单选择项 trigger默认false' . "\r\n" . 'LinkageSel.prototype._changeValues = function(parm, trigger, obj) {' . "\r\n" . '	if (obj && typeof obj === \'object\') {' . "\r\n" . '		var that = obj;' . "\r\n" . '	}' . "\r\n" . '	else {' . "\r\n" . '		var that = this;' . "\r\n" . '	}' . "\r\n" . '	' . "\r\n" . '	var st = that.st,' . "\r\n" . '		triggerValues = st.triggerValues,' . "\r\n" . '		bindEls = that.bindEls,' . "\r\n" . '		len = Math.min(bindEls.length, parm.length),' . "\r\n" . '		v = [],' . "\r\n" . '		elm;' . "\r\n" . '	' . "\r\n" . '	trigger = trigger ? true : false;' . "\r\n" . '	if ( isNumber(parm) || typeof parm === \'string\' ) {' . "\r\n" . '		parm = [parm];' . "\r\n" . '	}' . "\r\n" . '	else if (isArray(parm)) {' . "\r\n" . '		parm = parm;' . "\r\n" . '	}' . "\r\n" . '	else {' . "\r\n" . '		parm = [];	' . "\r\n" . '	}' . "\r\n" . '	that.resetTrigger(trigger, parm);' . "\r\n" . '		' . "\r\n" . '	for (var i = 0; i < len; i++) {' . "\r\n" . '		elm = bindEls[i][\'obj\'];' . "\r\n" . '		if (elm.val() !== parm[i]) {	// 如果数值与当前选项相同则不变更,直到第一个不相同的更改并退出循环' . "\r\n" . '			//elm && elm.find("option[value=\'" + parm[i]  + "\']").eq(0).attr(\'selected\', true);		// for jQuery pre 1.6' . "\r\n" . '			elm && elm.find("option[value=\'" + parm[i]  + "\']").eq(0).prop(\'selected\', true);		// for jQuery 1.6+' . "\r\n" . '			break;' . "\r\n" . '		}' . "\r\n" . '	}' . "\r\n" . '	elm.change();' . "\r\n" . '};' . "\r\n" . '' . "\r\n" . '' . "\r\n" . '// 设置changeValues()相应参数' . "\r\n" . 'LinkageSel.prototype.resetTrigger = function(trigger, value) {' . "\r\n" . '	var st = this.st;' . "\r\n" . '	trigger = trigger || typeof trigger === \'undefined\' ? true : false;' . "\r\n" . '	value = isArray(value) ? value : (typeof value === \'undefined\' ? [] : [value]);' . "\r\n" . '	st.triggerValues = value;' . "\r\n" . '	st.trigger = trigger;	// 让onChange回调函数能执行' . "\r\n" . '};' . "\r\n" . '' . "\r\n" . '' . "\r\n" . 'var isArray = function(v){ return Object.prototype.toString.apply(v) === \'[object Array]\';};' . "\r\n" . 'var isNumber = function(o) { return typeof o === \'number\' && isFinite(o); };' . "\r\n" . '';

?>
