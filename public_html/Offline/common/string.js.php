<?php
//dezend by http://www.yunlu99.com/
echo 'function qShowQuoteChar(stringstr)' . "\r\n" . '{' . "\r\n" . '	stringstr = str_replace(\'&quot;\', \'"\',stringstr);' . "\r\n" . '	return stringstr;' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function qNoScriptString(stringstr)' . "\r\n" . '{' . "\r\n" . '	stringstr = addslashes(stringstr);' . "\r\n" . '	stringstr = str_replace(\'&quot;\',\'"\',stringstr);' . "\r\n" . '    return trim(stringstr);' . "\r\n" . '}' . "\r\n" . 'function qShowQuoteChar(stringstr)' . "\r\n" . '{' . "\r\n" . '	stringstr = str_replace(\'&quot;\', \'"\',stringstr);' . "\r\n" . '	return stringstr;' . "\r\n" . '}' . "\r\n" . 'function qNoHTMLTag(htmlName,flag)' . "\r\n" . '{' . "\r\n" . '	htmlName = str_replace(\'&\',\'&amp;\',htmlName);' . "\r\n" . '	htmlName = str_replace(\'"\',\'&quot;\',htmlName);' . "\r\n" . '	htmlName = str_replace(\'<\',\'&lt;\',htmlName);' . "\r\n" . '	htmlName = str_replace(\'>\',\'&gt;\',htmlName);' . "\r\n" . '	if( flag == 1)' . "\r\n" . '	{' . "\r\n" . '		htmlName = str_replace(\'\\r\', \'\',htmlName);' . "\r\n" . '	}' . "\r\n" . '    return trim(htmlName);' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function qhtmlspecialchars(stringstr)' . "\r\n" . '{' . "\r\n" . '	stringstr = stringstr.replace(/&amp;((#(\\d{3,5}|x[a-fA-F0-9]{4}));)/g,\'&\\\\1\');' . "\r\n" . '	return stringstr;' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function seldate(obj)' . "\r\n" . '{' . "\r\n" . '	var datevalue = trim(obj.value);' . "\r\n" . '	if( datevalue == \'\' || datevalue == \'0000-00-00\')' . "\r\n" . '	{' . "\r\n" . '		var yearNow = date(\'Y\',time());' . "\r\n" . '		var monthNow = date(\'m\',time());' . "\r\n" . '		var dayNow = date(\'d\',time());' . "\r\n" . '	}' . "\r\n" . '	else' . "\r\n" . '	{' . "\r\n" . '		var theDate = datevalue.split(\'-\');' . "\r\n" . '		if( typeof theDate[0] != \'undefined\' )' . "\r\n" . '		{' . "\r\n" . '			var yearNow = theDate[0].replace(/\\D/g,\'\').toString();' . "\r\n" . '		}' . "\r\n" . '		else' . "\r\n" . '		{' . "\r\n" . '			var yearNow = date(\'Y\',time());' . "\r\n" . '		}' . "\r\n" . '		if( typeof theDate[1] != \'undefined\' )' . "\r\n" . '		{' . "\r\n" . '			var monthNow = theDate[1].replace(/\\D/g,\'\').toString();' . "\r\n" . '		}' . "\r\n" . '		else' . "\r\n" . '		{' . "\r\n" . '			var monthNow = date(\'m\',time());' . "\r\n" . '		}' . "\r\n" . '		if( typeof theDate[2] != \'undefined\' )' . "\r\n" . '		{' . "\r\n" . '			var dayNow = theDate[2].replace(/\\D/g,\'\').toString();' . "\r\n" . '		}' . "\r\n" . '		else' . "\r\n" . '		{' . "\r\n" . '			var dayNow = date(\'d\',time());' . "\r\n" . '		}		  ' . "\r\n" . '	}' . "\r\n" . '	var datesel = rexseePrompt.prompt(\'date\',\'title=请选择日期;year=\'+yearNow+\';month=\'+monthNow+\';day=\'+dayNow+\';cancel=true;\');' . "\r\n" . '	if( !rexseePrompt.isCanceled() )' . "\r\n" . '	{' . "\r\n" . '		if( datesel != \'\' )' . "\r\n" . '		{' . "\r\n" . '			var datedata = eval(\'(\'+datesel+\')\');' . "\r\n" . '			obj.value = datedata.year+\'-\'+sprintf("%02s",datedata.month)+\'-\'+sprintf("%02s",datedata.day);' . "\r\n" . '		}' . "\r\n" . '		else' . "\r\n" . '		{' . "\r\n" . '			obj.value = \'\';' . "\r\n" . '		}' . "\r\n" . '	}' . "\r\n" . '	obj.blur();' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function selslider(obj,startScale,endScale)' . "\r\n" . '{' . "\r\n" . '	var theValue= getTextValue(obj,startScale)' . "\r\n" . '	var slidersel = rexseePrompt.prompt(\'slider\',\'title=数值选择框;message=请滑动游标选择一个数值：;min=\'+startScale+\';max=\'+endScale+\';defaultValue=\'+theValue+\';cancel=true;\');' . "\r\n" . '	if( !rexseePrompt.isCanceled() )' . "\r\n" . '	{' . "\r\n" . '		if( slidersel != \'\' )' . "\r\n" . '		{' . "\r\n" . '			var slidervalue = eval(\'(\'+slidersel+\')\');' . "\r\n" . '			obj.value = slidervalue;' . "\r\n" . '		}' . "\r\n" . '		else' . "\r\n" . '		{' . "\r\n" . '			obj.value = \'\';' . "\r\n" . '		}' . "\r\n" . '	}' . "\r\n" . '	obj.blur();' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function qJsonCharFilter(sourceStr)' . "\r\n" . '{' . "\r\n" . '    sourceStr = str_replace("\\\\", "\\\\\\\\",sourceStr);' . "\r\n" . '    sourceStr = str_replace("\\b", "\\\\\\b",sourceStr);' . "\r\n" . '    sourceStr = str_replace("\\t", "\\\\\\t",sourceStr);' . "\r\n" . '    sourceStr = str_replace("\\r", "\\\\\\r",sourceStr);' . "\r\n" . '    sourceStr = str_replace("\\n", "\\\\\\n",sourceStr);' . "\r\n" . '    sourceStr = str_replace("\\f", "\\\\\\f",sourceStr);' . "\r\n" . '	sourceStr = str_replace(\'\\"\', \'\\\\\\"\',sourceStr);' . "\r\n" . '	sourceStr = str_replace("\\\'","\\\\\\\'",sourceStr);' . "\r\n" . '	sourceStr = str_replace("\'","\\\'",sourceStr);' . "\r\n" . '    return sourceStr;' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function qLiteCharFilter(sourceStr)' . "\r\n" . '{' . "\r\n" . '    sourceStr = str_replace("\\\\", "",sourceStr);' . "\r\n" . '    sourceStr = str_replace("\\b", "\\\\\\b",sourceStr);' . "\r\n" . '    sourceStr = str_replace("\\t", "\\\\\\t",sourceStr);' . "\r\n" . '    sourceStr = str_replace("\\r", "\\\\\\r",sourceStr);' . "\r\n" . '    sourceStr = str_replace("\\n", "\\\\\\n",sourceStr);' . "\r\n" . '    sourceStr = str_replace("\\f", "\\\\f",sourceStr);' . "\r\n" . '	sourceStr = str_replace(\'&\',"&amp;",sourceStr);' . "\r\n" . '	sourceStr = str_replace(\'"\',"&quot;",sourceStr);' . "\r\n" . '	sourceStr = str_replace(\'<\',"&lt;",sourceStr);' . "\r\n" . '	sourceStr = str_replace(\'>\',"&gt;",sourceStr);' . "\r\n" . '	sourceStr = str_replace("\'","&apos;",sourceStr);' . "\r\n" . '	return sourceStr;' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function qQuotaChar(sourceStr)' . "\r\n" . '{' . "\r\n" . '	sourceStr = str_replace("&quot;",\'"\',sourceStr);' . "\r\n" . '	return sourceStr;' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function str_replace (search, replace, subject, count) {' . "\r\n" . '    var i = 0,' . "\r\n" . '        j = 0,' . "\r\n" . '        temp = \'\',' . "\r\n" . '        repl = \'\',' . "\r\n" . '        sl = 0,' . "\r\n" . '        fl = 0,' . "\r\n" . '        f = [].concat(search),' . "\r\n" . '        r = [].concat(replace),' . "\r\n" . '        s = subject,' . "\r\n" . '        ra = Object.prototype.toString.call(r) === \'[object Array]\',' . "\r\n" . '        sa = Object.prototype.toString.call(s) === \'[object Array]\';' . "\r\n" . '    s = [].concat(s);' . "\r\n" . '    if (count) {' . "\r\n" . '        this.window[count] = 0;' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    for (i = 0, sl = s.length; i < sl; i++) {' . "\r\n" . '        if (s[i] === \'\') {' . "\r\n" . '            continue;' . "\r\n" . '        }' . "\r\n" . '        for (j = 0, fl = f.length; j < fl; j++) {' . "\r\n" . '            temp = s[i] + \'\';' . "\r\n" . '            repl = ra ? (r[j] !== undefined ? r[j] : \'\') : r[0];' . "\r\n" . '            s[i] = (temp).split(f[j]).join(repl);' . "\r\n" . '            if (count && s[i] !== temp) {' . "\r\n" . '                this.window[count] += (temp.length - s[i].length) / f[j].length;' . "\r\n" . '            }' . "\r\n" . '        }' . "\r\n" . '    }' . "\r\n" . '    return sa ? s : s[0];' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function addslashes (str) {' . "\r\n" . '   return (str + \'\').replace(/[\\\\"\']/g, \'\\\\$&\').replace(/\\u0000/g, \'\\\\0\');' . "\r\n" . '}' . "\r\n" . 'function trim (str, charlist) {' . "\r\n" . '    var whitespace, l = 0,' . "\r\n" . '        i = 0;' . "\r\n" . '    str += \'\';' . "\r\n" . ' ' . "\r\n" . '    if (!charlist) {' . "\r\n" . '        // default list' . "\r\n" . '        whitespace = " \\n\\r\\t\\f\\x0b\\xa0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000";' . "\r\n" . '    } else {' . "\r\n" . '        // preg_quote custom list' . "\r\n" . '        charlist += \'\';' . "\r\n" . '        whitespace = charlist.replace(/([\\[\\]\\(\\)\\.\\?\\/\\*\\{\\}\\+\\$\\^\\:])/g, \'$1\');' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    l = str.length;' . "\r\n" . '    for (i = 0; i < l; i++) {' . "\r\n" . '        if (whitespace.indexOf(str.charAt(i)) === -1) {' . "\r\n" . '            str = str.substring(i);' . "\r\n" . '            break;' . "\r\n" . '        }' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    l = str.length;' . "\r\n" . '    for (i = l - 1; i >= 0; i--) {' . "\r\n" . '        if (whitespace.indexOf(str.charAt(i)) === -1) {' . "\r\n" . '            str = str.substring(0, i + 1);' . "\r\n" . '            break;' . "\r\n" . '        }' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    return whitespace.indexOf(str.charAt(0)) === -1 ? str : \'\';' . "\r\n" . '}' . "\r\n" . 'function count (mixed_var, mode) {' . "\r\n" . '    var key, cnt = 0;' . "\r\n" . ' ' . "\r\n" . '    if (mixed_var === null || typeof mixed_var === \'undefined\') {' . "\r\n" . '        return 0;' . "\r\n" . '    } else if (mixed_var.constructor !== Array && mixed_var.constructor !== Object) {' . "\r\n" . '        return 1;' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    if (mode === \'COUNT_RECURSIVE\') {' . "\r\n" . '        mode = 1;' . "\r\n" . '    }' . "\r\n" . '    if (mode != 1) {' . "\r\n" . '        mode = 0;' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    for (key in mixed_var) {' . "\r\n" . '        if (mixed_var.hasOwnProperty(key)) {' . "\r\n" . '            cnt++;' . "\r\n" . '            if (mode == 1 && mixed_var[key] && (mixed_var[key].constructor === Array || mixed_var[key].constructor === Object)) {' . "\r\n" . '                cnt += this.count(mixed_var[key], 1);' . "\r\n" . '            }' . "\r\n" . '        }' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    return cnt;' . "\r\n" . '}' . "\r\n" . 'function base64_decode (data) {' . "\r\n" . '    var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";' . "\r\n" . '    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,' . "\r\n" . '        ac = 0,' . "\r\n" . '        dec = "",' . "\r\n" . '        tmp_arr = [];' . "\r\n" . ' ' . "\r\n" . '    if (!data) {' . "\r\n" . '        return data;' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    data += \'\';' . "\r\n" . ' ' . "\r\n" . '    do { // unpack four hexets into three octets using index points in b64' . "\r\n" . '        h1 = b64.indexOf(data.charAt(i++));' . "\r\n" . '        h2 = b64.indexOf(data.charAt(i++));' . "\r\n" . '        h3 = b64.indexOf(data.charAt(i++));' . "\r\n" . '        h4 = b64.indexOf(data.charAt(i++));' . "\r\n" . ' ' . "\r\n" . '        bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;' . "\r\n" . ' ' . "\r\n" . '        o1 = bits >> 16 & 0xff;' . "\r\n" . '        o2 = bits >> 8 & 0xff;' . "\r\n" . '        o3 = bits & 0xff;' . "\r\n" . ' ' . "\r\n" . '        if (h3 == 64) {' . "\r\n" . '            tmp_arr[ac++] = String.fromCharCode(o1);' . "\r\n" . '        } else if (h4 == 64) {' . "\r\n" . '            tmp_arr[ac++] = String.fromCharCode(o1, o2);' . "\r\n" . '        } else {' . "\r\n" . '            tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);' . "\r\n" . '        }' . "\r\n" . '    } while (i < data.length);' . "\r\n" . ' ' . "\r\n" . '    dec = tmp_arr.join(\'\');' . "\r\n" . '    dec = this.utf8_decode(dec);' . "\r\n" . ' ' . "\r\n" . '    return dec;' . "\r\n" . '}' . "\r\n" . 'function base64_encode (data) {' . "\r\n" . '    var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";' . "\r\n" . '    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,' . "\r\n" . '        ac = 0,' . "\r\n" . '        enc = "",' . "\r\n" . '        tmp_arr = [];' . "\r\n" . ' ' . "\r\n" . '    if (!data) {' . "\r\n" . '        return data;' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    data = this.utf8_encode(data + \'\');' . "\r\n" . ' ' . "\r\n" . '    do { // pack three octets into four hexets' . "\r\n" . '        o1 = data.charCodeAt(i++);' . "\r\n" . '        o2 = data.charCodeAt(i++);' . "\r\n" . '        o3 = data.charCodeAt(i++);' . "\r\n" . ' ' . "\r\n" . '        bits = o1 << 16 | o2 << 8 | o3;' . "\r\n" . ' ' . "\r\n" . '        h1 = bits >> 18 & 0x3f;' . "\r\n" . '        h2 = bits >> 12 & 0x3f;' . "\r\n" . '        h3 = bits >> 6 & 0x3f;' . "\r\n" . '        h4 = bits & 0x3f;' . "\r\n" . ' ' . "\r\n" . '        // use hexets to index into b64, and append result to encoded string' . "\r\n" . '        tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);' . "\r\n" . '    } while (i < data.length);' . "\r\n" . ' ' . "\r\n" . '    enc = tmp_arr.join(\'\');' . "\r\n" . '    ' . "\r\n" . '    var r = data.length % 3;' . "\r\n" . '    ' . "\r\n" . '    return (r ? enc.slice(0, r - 3) : enc) + \'===\'.slice(r || 3);' . "\r\n" . '}' . "\r\n" . 'function utf8_encode (argString) {' . "\r\n" . '    if (argString === null || typeof argString === "undefined") {' . "\r\n" . '        return "";' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    var string = (argString + \'\'); // .replace(/\\r\\n/g, "\\n").replace(/\\r/g, "\\n");' . "\r\n" . '    var utftext = "",' . "\r\n" . '        start, end, stringl = 0;' . "\r\n" . ' ' . "\r\n" . '    start = end = 0;' . "\r\n" . '    stringl = string.length;' . "\r\n" . '    for (var n = 0; n < stringl; n++) {' . "\r\n" . '        var c1 = string.charCodeAt(n);' . "\r\n" . '        var enc = null;' . "\r\n" . ' ' . "\r\n" . '        if (c1 < 128) {' . "\r\n" . '            end++;' . "\r\n" . '        } else if (c1 > 127 && c1 < 2048) {' . "\r\n" . '            enc = String.fromCharCode((c1 >> 6) | 192) + String.fromCharCode((c1 & 63) | 128);' . "\r\n" . '        } else {' . "\r\n" . '            enc = String.fromCharCode((c1 >> 12) | 224) + String.fromCharCode(((c1 >> 6) & 63) | 128) + String.fromCharCode((c1 & 63) | 128);' . "\r\n" . '        }' . "\r\n" . '        if (enc !== null) {' . "\r\n" . '            if (end > start) {' . "\r\n" . '                utftext += string.slice(start, end);' . "\r\n" . '            }' . "\r\n" . '            utftext += enc;' . "\r\n" . '            start = end = n + 1;' . "\r\n" . '        }' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    if (end > start) {' . "\r\n" . '        utftext += string.slice(start, stringl);' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    return utftext;' . "\r\n" . '}' . "\r\n" . 'function utf8_decode (str_data) {' . "\r\n" . '    var tmp_arr = [],' . "\r\n" . '        i = 0,' . "\r\n" . '        ac = 0,' . "\r\n" . '        c1 = 0,' . "\r\n" . '        c2 = 0,' . "\r\n" . '        c3 = 0;' . "\r\n" . ' ' . "\r\n" . '    str_data += \'\';' . "\r\n" . ' ' . "\r\n" . '    while (i < str_data.length) {' . "\r\n" . '        c1 = str_data.charCodeAt(i);' . "\r\n" . '        if (c1 < 128) {' . "\r\n" . '            tmp_arr[ac++] = String.fromCharCode(c1);' . "\r\n" . '            i++;' . "\r\n" . '        } else if (c1 > 191 && c1 < 224) {' . "\r\n" . '            c2 = str_data.charCodeAt(i + 1);' . "\r\n" . '            tmp_arr[ac++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));' . "\r\n" . '            i += 2;' . "\r\n" . '        } else {' . "\r\n" . '            c2 = str_data.charCodeAt(i + 1);' . "\r\n" . '            c3 = str_data.charCodeAt(i + 2);' . "\r\n" . '            tmp_arr[ac++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));' . "\r\n" . '            i += 3;' . "\r\n" . '        }' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    return tmp_arr.join(\'\');' . "\r\n" . '}' . "\r\n" . 'function is_array (mixed_var) {' . "\r\n" . '    var ini,' . "\r\n" . '        _getFuncName = function (fn) {' . "\r\n" . '            var name = (/\\W*function\\s+([\\w\\$]+)\\s*\\(/).exec(fn);' . "\r\n" . '            if (!name) {' . "\r\n" . '                return \'(Anonymous)\';' . "\r\n" . '            }' . "\r\n" . '            return name[1];' . "\r\n" . '        },' . "\r\n" . '        _isArray = function (mixed_var) {' . "\r\n" . '            // return Object.prototype.toString.call(mixed_var) === \'[object Array]\';' . "\r\n" . '            // The above works, but let\'s do the even more stringent approach: (since Object.prototype.toString could be overridden)' . "\r\n" . '            // Null, Not an object, no length property so couldn\'t be an Array (or String)' . "\r\n" . '            if (!mixed_var || typeof mixed_var !== \'object\' || typeof mixed_var.length !== \'number\') {' . "\r\n" . '                return false;' . "\r\n" . '            }' . "\r\n" . '            var len = mixed_var.length;' . "\r\n" . '            mixed_var[mixed_var.length] = \'bogus\';' . "\r\n" . '            // The only way I can think of to get around this (or where there would be trouble) would be to have an object defined ' . "\r\n" . '            // with a custom "length" getter which changed behavior on each call (or a setter to mess up the following below) or a custom ' . "\r\n" . '            // setter for numeric properties, but even that would need to listen for specific indexes; but there should be no false negatives ' . "\r\n" . '            // and such a false positive would need to rely on later JavaScript innovations like __defineSetter__' . "\r\n" . '            if (len !== mixed_var.length) { // We know it\'s an array since length auto-changed with the addition of a ' . "\r\n" . '            // numeric property at its length end, so safely get rid of our bogus element' . "\r\n" . '                mixed_var.length -= 1;' . "\r\n" . '                return true;' . "\r\n" . '            }' . "\r\n" . '            // Get rid of the property we added onto a non-array object; only possible ' . "\r\n" . '            // side-effect is if the user adds back the property later, it will iterate ' . "\r\n" . '            // this property in the older order placement in IE (an order which should not ' . "\r\n" . '            // be depended on anyways)' . "\r\n" . '            delete mixed_var[mixed_var.length];' . "\r\n" . '            return false;' . "\r\n" . '        };' . "\r\n" . ' ' . "\r\n" . '    if (!mixed_var || typeof mixed_var !== \'object\') {' . "\r\n" . '        return false;' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    // BEGIN REDUNDANT' . "\r\n" . '    this.php_js = this.php_js || {};' . "\r\n" . '    this.php_js.ini = this.php_js.ini || {};' . "\r\n" . '    // END REDUNDANT' . "\r\n" . '    ' . "\r\n" . '    ini = this.php_js.ini[\'phpjs.objectsAsArrays\'];' . "\r\n" . ' ' . "\r\n" . '    return _isArray(mixed_var) ||' . "\r\n" . '        // Allow returning true unless user has called' . "\r\n" . '        // ini_set(\'phpjs.objectsAsArrays\', 0) to disallow objects as arrays' . "\r\n" . '        ((!ini || ( // if it\'s not set to 0 and it\'s not \'off\', check for objects as arrays' . "\r\n" . '        (parseInt(ini.local_value, 10) !== 0 && (!ini.local_value.toLowerCase || ini.local_value.toLowerCase() !== \'off\')))' . "\r\n" . '        ) && (' . "\r\n" . '        Object.prototype.toString.call(mixed_var) === \'[object Object]\' && _getFuncName(mixed_var.constructor) === \'Object\' // Most likely a literal and intended as assoc. array' . "\r\n" . '        ));' . "\r\n" . '}' . "\r\n" . 'function in_array (needle, haystack, argStrict) {' . "\r\n" . '    var key = \'\',' . "\r\n" . '        strict = !! argStrict;' . "\r\n" . ' ' . "\r\n" . '    if (strict) {' . "\r\n" . '        for (key in haystack) {' . "\r\n" . '            if (haystack[key] === needle) {' . "\r\n" . '                return true;' . "\r\n" . '            }' . "\r\n" . '        }' . "\r\n" . '    } else {' . "\r\n" . '        for (key in haystack) {' . "\r\n" . '            if (haystack[key] == needle) {' . "\r\n" . '                return true;' . "\r\n" . '            }' . "\r\n" . '        }' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    return false;' . "\r\n" . '}' . "\r\n" . 'function array_keys (input, search_value, argStrict) {' . "\r\n" . '    var search = typeof search_value !== \'undefined\',' . "\r\n" . '        tmp_arr = [],' . "\r\n" . '        strict = !!argStrict,' . "\r\n" . '        include = true,' . "\r\n" . '        key = \'\';' . "\r\n" . ' ' . "\r\n" . '    if (input && typeof input === \'object\' && input.change_key_case) { // Duck-type check for our own array()-created PHPJS_Array' . "\r\n" . '        return input.keys(search_value, argStrict);' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    for (key in input) {' . "\r\n" . '        if (input.hasOwnProperty(key)) {' . "\r\n" . '            include = true;' . "\r\n" . '            if (search) {' . "\r\n" . '                if (strict && input[key] !== search_value) {' . "\r\n" . '                    include = false;' . "\r\n" . '                }' . "\r\n" . '                else if (input[key] != search_value) {' . "\r\n" . '                    include = false;' . "\r\n" . '                }' . "\r\n" . '            }' . "\r\n" . ' ' . "\r\n" . '            if (include) {' . "\r\n" . '                tmp_arr[tmp_arr.length] = key;' . "\r\n" . '            }' . "\r\n" . '        }' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    return tmp_arr;' . "\r\n" . '}' . "\r\n" . 'function date (format, timestamp) {' . "\r\n" . '    var that = this,' . "\r\n" . '        jsdate, f, formatChr = /\\\\?([a-z])/gi,' . "\r\n" . '        formatChrCb,' . "\r\n" . '        // Keep this here (works, but for code commented-out' . "\r\n" . '        // below for file size reasons)' . "\r\n" . '        //, tal= [],' . "\r\n" . '        _pad = function (n, c) {' . "\r\n" . '            if ((n = n + \'\').length < c) {' . "\r\n" . '                return new Array((++c) - n.length).join(\'0\') + n;' . "\r\n" . '            }' . "\r\n" . '            return n;' . "\r\n" . '        },' . "\r\n" . '        txt_words = ["Sun", "Mon", "Tues", "Wednes", "Thurs", "Fri", "Satur", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];' . "\r\n" . '    formatChrCb = function (t, s) {' . "\r\n" . '        return f[t] ? f[t]() : s;' . "\r\n" . '    };' . "\r\n" . '    f = {' . "\r\n" . '        // Day' . "\r\n" . '        d: function () { // Day of month w/leading 0; 01..31' . "\r\n" . '            return _pad(f.j(), 2);' . "\r\n" . '        },' . "\r\n" . '        D: function () { // Shorthand day name; Mon...Sun' . "\r\n" . '            return f.l().slice(0, 3);' . "\r\n" . '        },' . "\r\n" . '        j: function () { // Day of month; 1..31' . "\r\n" . '            return jsdate.getDate();' . "\r\n" . '        },' . "\r\n" . '        l: function () { // Full day name; Monday...Sunday' . "\r\n" . '            return txt_words[f.w()] + \'day\';' . "\r\n" . '        },' . "\r\n" . '        N: function () { // ISO-8601 day of week; 1[Mon]..7[Sun]' . "\r\n" . '            return f.w() || 7;' . "\r\n" . '        },' . "\r\n" . '        S: function () { // Ordinal suffix for day of month; st, nd, rd, th' . "\r\n" . '            var j = f.j();' . "\r\n" . '            return j > 4 && j < 21 ? \'th\' : {1: \'st\', 2: \'nd\', 3: \'rd\'}[j % 10] || \'th\';' . "\r\n" . '        },' . "\r\n" . '        w: function () { // Day of week; 0[Sun]..6[Sat]' . "\r\n" . '            return jsdate.getDay();' . "\r\n" . '        },' . "\r\n" . '        z: function () { // Day of year; 0..365' . "\r\n" . '            var a = new Date(f.Y(), f.n() - 1, f.j()),' . "\r\n" . '                b = new Date(f.Y(), 0, 1);' . "\r\n" . '            return Math.round((a - b) / 864e5) + 1;' . "\r\n" . '        },' . "\r\n" . ' ' . "\r\n" . '        // Week' . "\r\n" . '        W: function () { // ISO-8601 week number' . "\r\n" . '            var a = new Date(f.Y(), f.n() - 1, f.j() - f.N() + 3),' . "\r\n" . '                b = new Date(a.getFullYear(), 0, 4);' . "\r\n" . '            return _pad(1 + Math.round((a - b) / 864e5 / 7), 2);' . "\r\n" . '        },' . "\r\n" . ' ' . "\r\n" . '        // Month' . "\r\n" . '        F: function () { // Full month name; January...December' . "\r\n" . '            return txt_words[6 + f.n()];' . "\r\n" . '        },' . "\r\n" . '        m: function () { // Month w/leading 0; 01...12' . "\r\n" . '            return _pad(f.n(), 2);' . "\r\n" . '        },' . "\r\n" . '        M: function () { // Shorthand month name; Jan...Dec' . "\r\n" . '            return f.F().slice(0, 3);' . "\r\n" . '        },' . "\r\n" . '        n: function () { // Month; 1...12' . "\r\n" . '            return jsdate.getMonth() + 1;' . "\r\n" . '        },' . "\r\n" . '        t: function () { // Days in month; 28...31' . "\r\n" . '            return (new Date(f.Y(), f.n(), 0)).getDate();' . "\r\n" . '        },' . "\r\n" . ' ' . "\r\n" . '        // Year' . "\r\n" . '        L: function () { // Is leap year?; 0 or 1' . "\r\n" . '            return new Date(f.Y(), 1, 29).getMonth() === 1 | 0;' . "\r\n" . '        },' . "\r\n" . '        o: function () { // ISO-8601 year' . "\r\n" . '            var n = f.n(),' . "\r\n" . '                W = f.W(),' . "\r\n" . '                Y = f.Y();' . "\r\n" . '            return Y + (n === 12 && W < 9 ? -1 : n === 1 && W > 9);' . "\r\n" . '        },' . "\r\n" . '        Y: function () { // Full year; e.g. 1980...2010' . "\r\n" . '            return jsdate.getFullYear();' . "\r\n" . '        },' . "\r\n" . '        y: function () { // Last two digits of year; 00...99' . "\r\n" . '            return (f.Y() + "").slice(-2);' . "\r\n" . '        },' . "\r\n" . ' ' . "\r\n" . '        // Time' . "\r\n" . '        a: function () { // am or pm' . "\r\n" . '            return jsdate.getHours() > 11 ? "pm" : "am";' . "\r\n" . '        },' . "\r\n" . '        A: function () { // AM or PM' . "\r\n" . '            return f.a().toUpperCase();' . "\r\n" . '        },' . "\r\n" . '        B: function () { // Swatch Internet time; 000..999' . "\r\n" . '            var H = jsdate.getUTCHours() * 36e2,' . "\r\n" . '                // Hours' . "\r\n" . '                i = jsdate.getUTCMinutes() * 60,' . "\r\n" . '                // Minutes' . "\r\n" . '                s = jsdate.getUTCSeconds(); // Seconds' . "\r\n" . '            return _pad(Math.floor((H + i + s + 36e2) / 86.4) % 1e3, 3);' . "\r\n" . '        },' . "\r\n" . '        g: function () { // 12-Hours; 1..12' . "\r\n" . '            return f.G() % 12 || 12;' . "\r\n" . '        },' . "\r\n" . '        G: function () { // 24-Hours; 0..23' . "\r\n" . '            return jsdate.getHours();' . "\r\n" . '        },' . "\r\n" . '        h: function () { // 12-Hours w/leading 0; 01..12' . "\r\n" . '            return _pad(f.g(), 2);' . "\r\n" . '        },' . "\r\n" . '        H: function () { // 24-Hours w/leading 0; 00..23' . "\r\n" . '            return _pad(f.G(), 2);' . "\r\n" . '        },' . "\r\n" . '        i: function () { // Minutes w/leading 0; 00..59' . "\r\n" . '            return _pad(jsdate.getMinutes(), 2);' . "\r\n" . '        },' . "\r\n" . '        s: function () { // Seconds w/leading 0; 00..59' . "\r\n" . '            return _pad(jsdate.getSeconds(), 2);' . "\r\n" . '        },' . "\r\n" . '        u: function () { // Microseconds; 000000-999000' . "\r\n" . '            return _pad(jsdate.getMilliseconds() * 1000, 6);' . "\r\n" . '        },' . "\r\n" . ' ' . "\r\n" . '        // Timezone' . "\r\n" . '        e: function () {' . "\r\n" . '            throw \'Not supported (see source code of date() for timezone on how to add support)\';' . "\r\n" . '        },' . "\r\n" . '        I: function () { // DST observed?; 0 or 1' . "\r\n" . '            // Compares Jan 1 minus Jan 1 UTC to Jul 1 minus Jul 1 UTC.' . "\r\n" . '            // If they are not equal, then DST is observed.' . "\r\n" . '            var a = new Date(f.Y(), 0),' . "\r\n" . '                // Jan 1' . "\r\n" . '                c = Date.UTC(f.Y(), 0),' . "\r\n" . '                // Jan 1 UTC' . "\r\n" . '                b = new Date(f.Y(), 6),' . "\r\n" . '                // Jul 1' . "\r\n" . '                d = Date.UTC(f.Y(), 6); // Jul 1 UTC' . "\r\n" . '            return 0 + ((a - c) !== (b - d));' . "\r\n" . '        },' . "\r\n" . '        O: function () { // Difference to GMT in hour format; e.g. +0200' . "\r\n" . '            var tzo = jsdate.getTimezoneOffset(),' . "\r\n" . '                a = Math.abs(tzo);' . "\r\n" . '            return (tzo > 0 ? "-" : "+") + _pad(Math.floor(a / 60) * 100 + a % 60, 4);' . "\r\n" . '        },' . "\r\n" . '        P: function () { // Difference to GMT w/colon; e.g. +02:00' . "\r\n" . '            var O = f.O();' . "\r\n" . '            return (O.substr(0, 3) + ":" + O.substr(3, 2));' . "\r\n" . '        },' . "\r\n" . '        T: function () {' . "\r\n" . '            return \'UTC\';' . "\r\n" . '        },' . "\r\n" . '        Z: function () {' . "\r\n" . '            return -jsdate.getTimezoneOffset() * 60;' . "\r\n" . '        },' . "\r\n" . ' ' . "\r\n" . '        // Full Date/Time' . "\r\n" . '        c: function () { // ISO-8601 date.' . "\r\n" . '            return \'Y-m-d\\\\Th:i:sP\'.replace(formatChr, formatChrCb);' . "\r\n" . '        },' . "\r\n" . '        r: function () { // RFC 2822' . "\r\n" . '            return \'D, d M Y H:i:s O\'.replace(formatChr, formatChrCb);' . "\r\n" . '        },' . "\r\n" . '        U: function () { // Seconds since UNIX epoch' . "\r\n" . '            return jsdate.getTime() / 1000 | 0;' . "\r\n" . '        }' . "\r\n" . '    };' . "\r\n" . '    this.date = function (format, timestamp) {' . "\r\n" . '        that = this;' . "\r\n" . '        jsdate = ((typeof timestamp === \'undefined\') ? new Date() : // Not provided' . "\r\n" . '        (timestamp instanceof Date) ? new Date(timestamp) : // JS Date()' . "\r\n" . '        new Date(timestamp * 1000) // UNIX timestamp (auto-convert to int)' . "\r\n" . '        );' . "\r\n" . '        return format.replace(formatChr, formatChrCb);' . "\r\n" . '    };' . "\r\n" . '    return this.date(format, timestamp);' . "\r\n" . '}' . "\r\n" . 'function array_rand (input, num_req) {' . "\r\n" . '    var indexes = [];' . "\r\n" . '    var ticks = num_req || 1;' . "\r\n" . '    var checkDuplicate = function (input, value) {' . "\r\n" . '        var exist = false,' . "\r\n" . '            index = 0,' . "\r\n" . '            il = input.length;' . "\r\n" . '        while (index < il) {' . "\r\n" . '            if (input[index] === value) {' . "\r\n" . '                exist = true;' . "\r\n" . '                break;' . "\r\n" . '            }' . "\r\n" . '            index++;' . "\r\n" . '        }' . "\r\n" . '        return exist;' . "\r\n" . '    };' . "\r\n" . ' ' . "\r\n" . '    if (Object.prototype.toString.call(input) === \'[object Array]\' && ticks <= input.length) {' . "\r\n" . '        while (true) {' . "\r\n" . '            var rand = Math.floor((Math.random() * input.length));' . "\r\n" . '            if (indexes.length === ticks) {' . "\r\n" . '                break;' . "\r\n" . '            }' . "\r\n" . '            if (!checkDuplicate(indexes, rand)) {' . "\r\n" . '                indexes.push(rand);' . "\r\n" . '            }' . "\r\n" . '        }' . "\r\n" . '    } else {' . "\r\n" . '        indexes = null;' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    return ((ticks == 1) ? indexes.join() : indexes);' . "\r\n" . '}' . "\r\n" . 'function max () {' . "\r\n" . '    var ar, retVal, i = 0,' . "\r\n" . '        n = 0,' . "\r\n" . '        argv = arguments,' . "\r\n" . '        argc = argv.length,' . "\r\n" . '        _obj2Array = function (obj) {' . "\r\n" . '            if (Object.prototype.toString.call(obj) === \'[object Array]\') {' . "\r\n" . '                return obj;' . "\r\n" . '            }' . "\r\n" . '            else {' . "\r\n" . '                var ar = [];' . "\r\n" . '                for (var i in obj) {' . "\r\n" . '                    if (obj.hasOwnProperty(i)) {' . "\r\n" . '                        ar.push(obj[i]);' . "\r\n" . '                    }' . "\r\n" . '                }' . "\r\n" . '                return ar;' . "\r\n" . '            }' . "\r\n" . '        }, //function _obj2Array' . "\r\n" . '        _compare = function (current, next) {' . "\r\n" . '            var i = 0,' . "\r\n" . '                n = 0,' . "\r\n" . '                tmp = 0,' . "\r\n" . '                nl = 0,' . "\r\n" . '                cl = 0;' . "\r\n" . ' ' . "\r\n" . '            if (current === next) {' . "\r\n" . '                return 0;' . "\r\n" . '            }' . "\r\n" . '            else if (typeof current === \'object\') {' . "\r\n" . '                if (typeof next === \'object\') {' . "\r\n" . '                    current = _obj2Array(current);' . "\r\n" . '                    next = _obj2Array(next);' . "\r\n" . '                    cl = current.length;' . "\r\n" . '                    nl = next.length;' . "\r\n" . '                    if (nl > cl) {' . "\r\n" . '                        return 1;' . "\r\n" . '                    }' . "\r\n" . '                    else if (nl < cl) {' . "\r\n" . '                        return -1;' . "\r\n" . '                    }' . "\r\n" . '                    for (i = 0, n = cl; i < n; ++i) {' . "\r\n" . '                        tmp = _compare(current[i], next[i]);' . "\r\n" . '                        if (tmp == 1) {' . "\r\n" . '                            return 1;' . "\r\n" . '                        }' . "\r\n" . '                        else if (tmp == -1) {' . "\r\n" . '                            return -1;' . "\r\n" . '                        }' . "\r\n" . '                    }' . "\r\n" . '                    return 0;' . "\r\n" . '                }' . "\r\n" . '                return -1;' . "\r\n" . '            }' . "\r\n" . '            else if (typeof next == \'object\') {' . "\r\n" . '                return 1;' . "\r\n" . '            }' . "\r\n" . '            else if (isNaN(next) && !isNaN(current)) {' . "\r\n" . '                if (current == 0) {' . "\r\n" . '                    return 0;' . "\r\n" . '                }' . "\r\n" . '                return (current < 0 ? 1 : -1);' . "\r\n" . '            }' . "\r\n" . '            else if (isNaN(current) && !isNaN(next)) {' . "\r\n" . '                if (next == 0) {' . "\r\n" . '                    return 0;' . "\r\n" . '                }' . "\r\n" . '                return (next > 0 ? 1 : -1);' . "\r\n" . '            }' . "\r\n" . ' ' . "\r\n" . '            if (next == current) {' . "\r\n" . '                return 0;' . "\r\n" . '            }' . "\r\n" . '            return (next > current ? 1 : -1);' . "\r\n" . '        }; //function _compare' . "\r\n" . '    if (argc === 0) {' . "\r\n" . '        throw new Error(\'At least one value should be passed to max()\');' . "\r\n" . '    }' . "\r\n" . '    else if (argc === 1) {' . "\r\n" . '        if (typeof argv[0] === \'object\') {' . "\r\n" . '            ar = _obj2Array(argv[0]);' . "\r\n" . '        }' . "\r\n" . '        else {' . "\r\n" . '            throw new Error(\'Wrong parameter count for max()\');' . "\r\n" . '        }' . "\r\n" . '        if (ar.length === 0) {' . "\r\n" . '            throw new Error(\'Array must contain at least one element for max()\');' . "\r\n" . '        }' . "\r\n" . '    }' . "\r\n" . '    else {' . "\r\n" . '        ar = argv;' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    retVal = ar[0];' . "\r\n" . '    for (i = 1, n = ar.length; i < n; ++i) {' . "\r\n" . '        if (_compare(retVal, ar[i]) == 1) {' . "\r\n" . '            retVal = ar[i];' . "\r\n" . '        }' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    return retVal;' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function min () {' . "\r\n" . '    var ar, retVal, i = 0,' . "\r\n" . '        n = 0,' . "\r\n" . '        argv = arguments,' . "\r\n" . '        argc = argv.length,' . "\r\n" . '        _obj2Array = function (obj) {' . "\r\n" . '            if (Object.prototype.toString.call(obj) === \'[object Array]\') {' . "\r\n" . '                return obj;' . "\r\n" . '            }' . "\r\n" . '            var ar = [];' . "\r\n" . '            for (var i in obj) {' . "\r\n" . '                if (obj.hasOwnProperty(i)) {' . "\r\n" . '                    ar.push(obj[i]);' . "\r\n" . '                }' . "\r\n" . '            }' . "\r\n" . '            return ar;' . "\r\n" . '        }, //function _obj2Array' . "\r\n" . '        _compare = function (current, next) {' . "\r\n" . '            var i = 0,' . "\r\n" . '                n = 0,' . "\r\n" . '                tmp = 0,' . "\r\n" . '                nl = 0,' . "\r\n" . '                cl = 0;' . "\r\n" . ' ' . "\r\n" . '            if (current === next) {' . "\r\n" . '                return 0;' . "\r\n" . '            }' . "\r\n" . '            else if (typeof current === \'object\') {' . "\r\n" . '                if (typeof next === \'object\') {' . "\r\n" . '                    current = _obj2Array(current);' . "\r\n" . '                    next = _obj2Array(next);' . "\r\n" . '                    cl = current.length;' . "\r\n" . '                    nl = next.length;' . "\r\n" . '                    if (nl > cl) {' . "\r\n" . '                        return 1;' . "\r\n" . '                    } ' . "\r\n" . '                    else if (nl < cl) {' . "\r\n" . '                        return -1;' . "\r\n" . '                    }' . "\r\n" . '                    for (i = 0, n = cl; i < n; ++i) {' . "\r\n" . '                        tmp = _compare(current[i], next[i]);' . "\r\n" . '                        if (tmp == 1) {' . "\r\n" . '                            return 1;' . "\r\n" . '                        }' . "\r\n" . '                        else if (tmp == -1) {' . "\r\n" . '                            return -1;' . "\r\n" . '                        }' . "\r\n" . '                    }' . "\r\n" . '                    return 0;' . "\r\n" . '                }' . "\r\n" . '                return -1;' . "\r\n" . '            }' . "\r\n" . '            else if (typeof next == \'object\') {' . "\r\n" . '                return 1;' . "\r\n" . '            }' . "\r\n" . '            else if (isNaN(next) && !isNaN(current)) {' . "\r\n" . '                if (current == 0) {' . "\r\n" . '                    return 0;' . "\r\n" . '                }' . "\r\n" . '                return (current < 0 ? 1 : -1);' . "\r\n" . '            }' . "\r\n" . '            else if (isNaN(current) && !isNaN(next)) {' . "\r\n" . '                if (next == 0) {' . "\r\n" . '                    return 0;' . "\r\n" . '                }' . "\r\n" . '                return (next > 0 ? 1 : -1);' . "\r\n" . '            }' . "\r\n" . '            ' . "\r\n" . '            if (next == current) {' . "\r\n" . '                return 0;' . "\r\n" . '            }' . "\r\n" . '            return (next > current ? 1 : -1);' . "\r\n" . '        }; //function _compare' . "\r\n" . '    if (argc === 0) {' . "\r\n" . '        throw new Error(\'At least one value should be passed to min()\');' . "\r\n" . '    }' . "\r\n" . '    else if (argc === 1) {' . "\r\n" . '        if (typeof argv[0] === \'object\') {' . "\r\n" . '            ar = _obj2Array(argv[0]);' . "\r\n" . '        }' . "\r\n" . '        else {' . "\r\n" . '            throw new Error(\'Wrong parameter count for min()\');' . "\r\n" . '        }' . "\r\n" . '        if (ar.length === 0) {' . "\r\n" . '            throw new Error(\'Array must contain at least one element for min()\');' . "\r\n" . '        }' . "\r\n" . '    }' . "\r\n" . '    else {' . "\r\n" . '        ar = argv;' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    retVal = ar[0];' . "\r\n" . '    for (i = 1, n = ar.length; i < n; ++i) {' . "\r\n" . '        if (_compare(retVal, ar[i]) == -1) {' . "\r\n" . '            retVal = ar[i];' . "\r\n" . '        }' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    return retVal;' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function implode (glue, pieces) {' . "\r\n" . '    var i = \'\',' . "\r\n" . '        retVal = \'\',' . "\r\n" . '        tGlue = \'\';' . "\r\n" . '    if (arguments.length === 1) {' . "\r\n" . '        pieces = glue;' . "\r\n" . '        glue = \'\';' . "\r\n" . '    }' . "\r\n" . '    if (typeof(pieces) === \'object\') {' . "\r\n" . '        if (Object.prototype.toString.call(pieces) === \'[object Array]\') {' . "\r\n" . '            return pieces.join(glue);' . "\r\n" . '        } ' . "\r\n" . '        for (i in pieces) {' . "\r\n" . '            retVal += tGlue + pieces[i];' . "\r\n" . '            tGlue = glue;' . "\r\n" . '        }' . "\r\n" . '        return retVal;' . "\r\n" . '    }' . "\r\n" . '    return pieces;' . "\r\n" . '}' . "\r\n" . 'function substr (str, start, len) {' . "\r\n" . '    var i = 0,' . "\r\n" . '        allBMP = true,' . "\r\n" . '        es = 0,' . "\r\n" . '        el = 0,' . "\r\n" . '        se = 0,' . "\r\n" . '        ret = \'\';' . "\r\n" . '    str += \'\';' . "\r\n" . '    var end = str.length;' . "\r\n" . ' ' . "\r\n" . '    // BEGIN REDUNDANT' . "\r\n" . '    this.php_js = this.php_js || {};' . "\r\n" . '    this.php_js.ini = this.php_js.ini || {};' . "\r\n" . '    // END REDUNDANT' . "\r\n" . '    switch ((this.php_js.ini[\'unicode.semantics\'] && this.php_js.ini[\'unicode.semantics\'].local_value.toLowerCase())) {' . "\r\n" . '    case \'on\':' . "\r\n" . '        // Full-blown Unicode including non-Basic-Multilingual-Plane characters' . "\r\n" . '        // strlen()' . "\r\n" . '        for (i = 0; i < str.length; i++) {' . "\r\n" . '            if (/[\\uD800-\\uDBFF]/.test(str.charAt(i)) && /[\\uDC00-\\uDFFF]/.test(str.charAt(i + 1))) {' . "\r\n" . '                allBMP = false;' . "\r\n" . '                break;' . "\r\n" . '            }' . "\r\n" . '        }' . "\r\n" . ' ' . "\r\n" . '        if (!allBMP) {' . "\r\n" . '            if (start < 0) {' . "\r\n" . '                for (i = end - 1, es = (start += end); i >= es; i--) {' . "\r\n" . '                    if (/[\\uDC00-\\uDFFF]/.test(str.charAt(i)) && /[\\uD800-\\uDBFF]/.test(str.charAt(i - 1))) {' . "\r\n" . '                        start--;' . "\r\n" . '                        es--;' . "\r\n" . '                    }' . "\r\n" . '                }' . "\r\n" . '            } else {' . "\r\n" . '                var surrogatePairs = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;' . "\r\n" . '                while ((surrogatePairs.exec(str)) != null) {' . "\r\n" . '                    var li = surrogatePairs.lastIndex;' . "\r\n" . '                    if (li - 2 < start) {' . "\r\n" . '                        start++;' . "\r\n" . '                    } else {' . "\r\n" . '                        break;' . "\r\n" . '                    }' . "\r\n" . '                }' . "\r\n" . '            }' . "\r\n" . ' ' . "\r\n" . '            if (start >= end || start < 0) {' . "\r\n" . '                return false;' . "\r\n" . '            }' . "\r\n" . '            if (len < 0) {' . "\r\n" . '                for (i = end - 1, el = (end += len); i >= el; i--) {' . "\r\n" . '                    if (/[\\uDC00-\\uDFFF]/.test(str.charAt(i)) && /[\\uD800-\\uDBFF]/.test(str.charAt(i - 1))) {' . "\r\n" . '                        end--;' . "\r\n" . '                        el--;' . "\r\n" . '                    }' . "\r\n" . '                }' . "\r\n" . '                if (start > end) {' . "\r\n" . '                    return false;' . "\r\n" . '                }' . "\r\n" . '                return str.slice(start, end);' . "\r\n" . '            } else {' . "\r\n" . '                se = start + len;' . "\r\n" . '                for (i = start; i < se; i++) {' . "\r\n" . '                    ret += str.charAt(i);' . "\r\n" . '                    if (/[\\uD800-\\uDBFF]/.test(str.charAt(i)) && /[\\uDC00-\\uDFFF]/.test(str.charAt(i + 1))) {' . "\r\n" . '                        se++; // Go one further, since one of the "characters" is part of a surrogate pair' . "\r\n" . '                    }' . "\r\n" . '                }' . "\r\n" . '                return ret;' . "\r\n" . '            }' . "\r\n" . '            break;' . "\r\n" . '        }' . "\r\n" . '        // Fall-through' . "\r\n" . '    case \'off\':' . "\r\n" . '        // assumes there are no non-BMP characters;' . "\r\n" . '        //    if there may be such characters, then it is best to turn it on (critical in true XHTML/XML)' . "\r\n" . '    default:' . "\r\n" . '        if (start < 0) {' . "\r\n" . '            start += end;' . "\r\n" . '        }' . "\r\n" . '        end = typeof len === \'undefined\' ? end : (len < 0 ? len + end : len + start);' . "\r\n" . '        // PHP returns false if start does not fall within the string.' . "\r\n" . '        // PHP returns false if the calculated end comes before the calculated start.' . "\r\n" . '        // PHP returns an empty string if start and end are the same.' . "\r\n" . '        // Otherwise, PHP returns the portion of the string from start to end.' . "\r\n" . '        return start >= str.length || start < 0 || start > end ? !1 : str.slice(start, end);' . "\r\n" . '    }' . "\r\n" . '    return undefined; // Please Netbeans' . "\r\n" . '}' . "\r\n" . 'function time () {' . "\r\n" . '    return Math.floor(new Date().getTime() / 1000);' . "\r\n" . '}' . "\r\n" . 'function array_search (needle, haystack, argStrict) {' . "\r\n" . '    var strict = !!argStrict,' . "\r\n" . '        key = \'\';' . "\r\n" . '    ' . "\r\n" . '    if (haystack && typeof haystack === \'object\' && haystack.change_key_case) { // Duck-type check for our own array()-created PHPJS_Array' . "\r\n" . '        return haystack.search(needle, argStrict);' . "\r\n" . '    }' . "\r\n" . '    if (typeof needle === \'object\' && needle.exec) { // Duck-type for RegExp' . "\r\n" . '        if (!strict) { // Let\'s consider case sensitive searches as strict' . "\r\n" . '            var flags = \'i\' + (needle.global ? \'g\' : \'\') +' . "\r\n" . '                        (needle.multiline ? \'m\' : \'\') +' . "\r\n" . '                        (needle.sticky ? \'y\' : \'\'); // sticky is FF only' . "\r\n" . '            needle = new RegExp(needle.source, flags);' . "\r\n" . '        }' . "\r\n" . '        for (key in haystack) {' . "\r\n" . '            if (needle.test(haystack[key])) {' . "\r\n" . '                return key;' . "\r\n" . '            }' . "\r\n" . '        }' . "\r\n" . '        return false;' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    for (key in haystack) {' . "\r\n" . '        if ((strict && haystack[key] === needle) || (!strict && haystack[key] == needle)) {' . "\r\n" . '            return key;' . "\r\n" . '        }' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    return false;' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function round (value, precision, mode) {' . "\r\n" . '    var m, f, isHalf, sgn; // helper variables' . "\r\n" . '    precision |= 0; // making sure precision is integer' . "\r\n" . '    m = Math.pow(10, precision);' . "\r\n" . '    value *= m;' . "\r\n" . '    sgn = (value > 0) | -(value < 0); // sign of the number' . "\r\n" . '    isHalf = value % 1 === 0.5 * sgn;' . "\r\n" . '    f = Math.floor(value);' . "\r\n" . ' ' . "\r\n" . '    if (isHalf) {' . "\r\n" . '        switch (mode) {' . "\r\n" . '        case \'PHP_ROUND_HALF_DOWN\':' . "\r\n" . '            value = f + (sgn < 0); // rounds .5 toward zero' . "\r\n" . '            break;' . "\r\n" . '        case \'PHP_ROUND_HALF_EVEN\':' . "\r\n" . '            value = f + (f % 2 * sgn); // rouds .5 towards the next even integer' . "\r\n" . '            break;' . "\r\n" . '        case \'PHP_ROUND_HALF_ODD\':' . "\r\n" . '            value = f + !(f % 2); // rounds .5 towards the next odd integer' . "\r\n" . '            break;' . "\r\n" . '        default:' . "\r\n" . '            value = f + (sgn > 0); // rounds .5 away from zero' . "\r\n" . '        }' . "\r\n" . '    } ' . "\r\n" . '    return (isHalf ? value : Math.round(value)) / m;' . "\r\n" . '}' . "\r\n" . 'function rsort (inputArr, sort_flags) {' . "\r\n" . '	var valArr = [],' . "\r\n" . '		k = \'\',' . "\r\n" . '		i = 0,' . "\r\n" . '		sorter = false,' . "\r\n" . '		that = this,' . "\r\n" . '		strictForIn = false,' . "\r\n" . '		populateArr = [];' . "\r\n" . ' ' . "\r\n" . '	switch (sort_flags) {' . "\r\n" . '	case \'SORT_STRING\':' . "\r\n" . '		// compare items as strings' . "\r\n" . '		sorter = function (a, b) {' . "\r\n" . '			return that.strnatcmp(b, a);' . "\r\n" . '		};' . "\r\n" . '		break;' . "\r\n" . '	case \'SORT_LOCALE_STRING\':' . "\r\n" . '		// compare items as strings, based on the current locale (set with  i18n_loc_set_default() as of PHP6)' . "\r\n" . '		var loc = this.i18n_loc_get_default();' . "\r\n" . '		sorter = this.php_js.i18nLocales[loc].sorting;' . "\r\n" . '		break;' . "\r\n" . '	case \'SORT_NUMERIC\':' . "\r\n" . '		// compare items numerically' . "\r\n" . '		sorter = function (a, b) {' . "\r\n" . '			return (b - a);' . "\r\n" . '		};' . "\r\n" . '		break;' . "\r\n" . '	case \'SORT_REGULAR\':' . "\r\n" . '		// compare items normally (don\'t change types)' . "\r\n" . '	default:' . "\r\n" . '		sorter = function (b, a) {' . "\r\n" . '			var aFloat = parseFloat(a),' . "\r\n" . '				bFloat = parseFloat(b),' . "\r\n" . '				aNumeric = aFloat + \'\' === a,' . "\r\n" . '				bNumeric = bFloat + \'\' === b;' . "\r\n" . '			if (aNumeric && bNumeric) {' . "\r\n" . '				return aFloat > bFloat ? 1 : aFloat < bFloat ? -1 : 0;' . "\r\n" . '			} else if (aNumeric && !bNumeric) {' . "\r\n" . '				return 1;' . "\r\n" . '			} else if (!aNumeric && bNumeric) {' . "\r\n" . '				return -1;' . "\r\n" . '			}' . "\r\n" . '			return a > b ? 1 : a < b ? -1 : 0;' . "\r\n" . '		};' . "\r\n" . '		break;' . "\r\n" . '	}' . "\r\n" . ' ' . "\r\n" . '	// BEGIN REDUNDANT' . "\r\n" . '	this.php_js = this.php_js || {};' . "\r\n" . '	this.php_js.ini = this.php_js.ini || {};' . "\r\n" . '	// END REDUNDANT' . "\r\n" . '	strictForIn = this.php_js.ini[\'phpjs.strictForIn\'] && this.php_js.ini[\'phpjs.strictForIn\'].local_value && this.php_js.ini[\'phpjs.strictForIn\'].local_value !== \'off\';' . "\r\n" . '	populateArr = strictForIn ? inputArr : populateArr;' . "\r\n" . ' ' . "\r\n" . '	for (k in inputArr) { // Get key and value arrays' . "\r\n" . '		if (inputArr.hasOwnProperty(k)) {' . "\r\n" . '			valArr.push(inputArr[k]);' . "\r\n" . '			if (strictForIn) {' . "\r\n" . '				delete inputArr[k];' . "\r\n" . '			}' . "\r\n" . '		}' . "\r\n" . '	}' . "\r\n" . ' ' . "\r\n" . '	valArr.sort(sorter);' . "\r\n" . ' ' . "\r\n" . '	for (i = 0; i < valArr.length; i++) { // Repopulate the old array' . "\r\n" . '		populateArr[i] = valArr[i];' . "\r\n" . '	}' . "\r\n" . '	return strictForIn || populateArr;' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function getDbRows(sql,dbPath)' . "\r\n" . '{' . "\r\n" . '	rexseeCursor.openDB(\'enableq\',dbPath);' . "\r\n" . '	rexseeCursor.create(\'single\',\'enableq\',sql);' . "\r\n" . '	var rtn = "";' . "\r\n" . '	var cellvalue = "";' . "\r\n" . '	if( rexseeCursor.exists(\'single\') )' . "\r\n" . '	{' . "\r\n" . '	    rtn += "{";' . "\r\n" . '		rtn += "\\"total\\":\\"" + rexseeCursor.getCount(\'single\') + "\\"";  ' . "\r\n" . '		rtn += ",\\"columns\\":[";  ' . "\r\n" . '		for (var i = 0; i < rexseeCursor.getColumnCount(\'single\'); i++) {  ' . "\r\n" . '			if (i != 0) rtn += ",";  ' . "\r\n" . '			rtn += "\\"" + rexseeCursor.getColumnName(\'single\',i) + "\\"";  ' . "\r\n" . '		}  ' . "\r\n" . '		rtn += "]";  ' . "\r\n" . '		rtn += ",\\"rows\\":[";  ' . "\r\n" . '		for (var i = 0; i < rexseeCursor.getCount(\'single\'); i++) {  ' . "\r\n" . '			if (i != 0) rtn += ",";  ' . "\r\n" . '			rtn += "[";  ' . "\r\n" . '			for (var j = 0; j < rexseeCursor.getColumnCount(\'single\'); j++) {  ' . "\r\n" . '				if (j != 0) rtn += ",";  ' . "\r\n" . '				cellvalue = rexseeCursor.readByColumnIndex(\'single\',i,j);' . "\r\n" . '				if( cellvalue != "false" && cellvalue != "undefine" )' . "\r\n" . '				{' . "\r\n" . '					rtn += "\\"" + cellvalue.replace(/"/g,\'\\\\\\"\') + "\\""; ' . "\r\n" . '				}' . "\r\n" . '				else' . "\r\n" . '				{' . "\r\n" . '					rtn += "\\"\\""; ' . "\r\n" . '				}					' . "\r\n" . '			}  ' . "\r\n" . '			rtn += "]";  ' . "\r\n" . '		}  ' . "\r\n" . '		rtn += "]";  ' . "\r\n" . '		rtn += "}"; ' . "\r\n" . '	}' . "\r\n" . '	rexseeCursor.closeAll();' . "\r\n" . '	return rtn;  ' . "\r\n" . '}' . "\r\n" . 'function basename (path, suffix) {' . "\r\n" . '    var b = path.replace(/^.*[\\/\\\\]/g, \'\');' . "\r\n" . ' ' . "\r\n" . '    if (typeof(suffix) == \'string\' && b.substr(b.length - suffix.length) == suffix) {' . "\r\n" . '        b = b.substr(0, b.length - suffix.length);' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    return b;' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function strtolower (str) {' . "\r\n" . '    return (str + \'\').toLowerCase();' . "\r\n" . '}' . "\r\n" . 'function sprintf () {' . "\r\n" . '    var regex = /%%|%(\\d+\\$)?([-+\\\'#0 ]*)(\\*\\d+\\$|\\*|\\d+)?(\\.(\\*\\d+\\$|\\*|\\d+))?([scboxXuidfegEG])/g;' . "\r\n" . '    var a = arguments,' . "\r\n" . '        i = 0,' . "\r\n" . '        format = a[i++];' . "\r\n" . ' ' . "\r\n" . '    // pad()' . "\r\n" . '    var pad = function (str, len, chr, leftJustify) {' . "\r\n" . '        if (!chr) {' . "\r\n" . '            chr = \' \';' . "\r\n" . '        }' . "\r\n" . '        var padding = (str.length >= len) ? \'\' : Array(1 + len - str.length >>> 0).join(chr);' . "\r\n" . '        return leftJustify ? str + padding : padding + str;' . "\r\n" . '    };' . "\r\n" . ' ' . "\r\n" . '    // justify()' . "\r\n" . '    var justify = function (value, prefix, leftJustify, minWidth, zeroPad, customPadChar) {' . "\r\n" . '        var diff = minWidth - value.length;' . "\r\n" . '        if (diff > 0) {' . "\r\n" . '            if (leftJustify || !zeroPad) {' . "\r\n" . '                value = pad(value, minWidth, customPadChar, leftJustify);' . "\r\n" . '            } else {' . "\r\n" . '                value = value.slice(0, prefix.length) + pad(\'\', diff, \'0\', true) + value.slice(prefix.length);' . "\r\n" . '            }' . "\r\n" . '        }' . "\r\n" . '        return value;' . "\r\n" . '    };' . "\r\n" . ' ' . "\r\n" . '    // formatBaseX()' . "\r\n" . '    var formatBaseX = function (value, base, prefix, leftJustify, minWidth, precision, zeroPad) {' . "\r\n" . '        // Note: casts negative numbers to positive ones' . "\r\n" . '        var number = value >>> 0;' . "\r\n" . '        prefix = prefix && number && {' . "\r\n" . '            \'2\': \'0b\',' . "\r\n" . '            \'8\': \'0\',' . "\r\n" . '            \'16\': \'0x\'' . "\r\n" . '        }[base] || \'\';' . "\r\n" . '        value = prefix + pad(number.toString(base), precision || 0, \'0\', false);' . "\r\n" . '        return justify(value, prefix, leftJustify, minWidth, zeroPad);' . "\r\n" . '    };' . "\r\n" . ' ' . "\r\n" . '    // formatString()' . "\r\n" . '    var formatString = function (value, leftJustify, minWidth, precision, zeroPad, customPadChar) {' . "\r\n" . '        if (precision != null) {' . "\r\n" . '            value = value.slice(0, precision);' . "\r\n" . '        }' . "\r\n" . '        return justify(value, \'\', leftJustify, minWidth, zeroPad, customPadChar);' . "\r\n" . '    };' . "\r\n" . ' ' . "\r\n" . '    // doFormat()' . "\r\n" . '    var doFormat = function (substring, valueIndex, flags, minWidth, _, precision, type) {' . "\r\n" . '        var number;' . "\r\n" . '        var prefix;' . "\r\n" . '        var method;' . "\r\n" . '        var textTransform;' . "\r\n" . '        var value;' . "\r\n" . ' ' . "\r\n" . '        if (substring == \'%%\') {' . "\r\n" . '            return \'%\';' . "\r\n" . '        }' . "\r\n" . ' ' . "\r\n" . '        // parse flags' . "\r\n" . '        var leftJustify = false,' . "\r\n" . '            positivePrefix = \'\',' . "\r\n" . '            zeroPad = false,' . "\r\n" . '            prefixBaseX = false,' . "\r\n" . '            customPadChar = \' \';' . "\r\n" . '        var flagsl = flags.length;' . "\r\n" . '        for (var j = 0; flags && j < flagsl; j++) {' . "\r\n" . '            switch (flags.charAt(j)) {' . "\r\n" . '            case \' \':' . "\r\n" . '                positivePrefix = \' \';' . "\r\n" . '                break;' . "\r\n" . '            case \'+\':' . "\r\n" . '                positivePrefix = \'+\';' . "\r\n" . '                break;' . "\r\n" . '            case \'-\':' . "\r\n" . '                leftJustify = true;' . "\r\n" . '                break;' . "\r\n" . '            case "\'":' . "\r\n" . '                customPadChar = flags.charAt(j + 1);' . "\r\n" . '                break;' . "\r\n" . '            case \'0\':' . "\r\n" . '                zeroPad = true;' . "\r\n" . '                break;' . "\r\n" . '            case \'#\':' . "\r\n" . '                prefixBaseX = true;' . "\r\n" . '                break;' . "\r\n" . '            }' . "\r\n" . '        }' . "\r\n" . ' ' . "\r\n" . '        // parameters may be null, undefined, empty-string or real valued' . "\r\n" . '        // we want to ignore null, undefined and empty-string values' . "\r\n" . '        if (!minWidth) {' . "\r\n" . '            minWidth = 0;' . "\r\n" . '        } else if (minWidth == \'*\') {' . "\r\n" . '            minWidth = +a[i++];' . "\r\n" . '        } else if (minWidth.charAt(0) == \'*\') {' . "\r\n" . '            minWidth = +a[minWidth.slice(1, -1)];' . "\r\n" . '        } else {' . "\r\n" . '            minWidth = +minWidth;' . "\r\n" . '        }' . "\r\n" . ' ' . "\r\n" . '        // Note: undocumented perl feature:' . "\r\n" . '        if (minWidth < 0) {' . "\r\n" . '            minWidth = -minWidth;' . "\r\n" . '            leftJustify = true;' . "\r\n" . '        }' . "\r\n" . ' ' . "\r\n" . '        if (!isFinite(minWidth)) {' . "\r\n" . '            throw new Error(\'sprintf: (minimum-)width must be finite\');' . "\r\n" . '        }' . "\r\n" . ' ' . "\r\n" . '        if (!precision) {' . "\r\n" . '            precision = \'fFeE\'.indexOf(type) > -1 ? 6 : (type == \'d\') ? 0 : undefined;' . "\r\n" . '        } else if (precision == \'*\') {' . "\r\n" . '            precision = +a[i++];' . "\r\n" . '        } else if (precision.charAt(0) == \'*\') {' . "\r\n" . '            precision = +a[precision.slice(1, -1)];' . "\r\n" . '        } else {' . "\r\n" . '            precision = +precision;' . "\r\n" . '        }' . "\r\n" . ' ' . "\r\n" . '        // grab value using valueIndex if required?' . "\r\n" . '        value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];' . "\r\n" . ' ' . "\r\n" . '        switch (type) {' . "\r\n" . '        case \'s\':' . "\r\n" . '            return formatString(String(value), leftJustify, minWidth, precision, zeroPad, customPadChar);' . "\r\n" . '        case \'c\':' . "\r\n" . '            return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad);' . "\r\n" . '        case \'b\':' . "\r\n" . '            return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad);' . "\r\n" . '        case \'o\':' . "\r\n" . '            return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad);' . "\r\n" . '        case \'x\':' . "\r\n" . '            return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad);' . "\r\n" . '        case \'X\':' . "\r\n" . '            return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad).toUpperCase();' . "\r\n" . '        case \'u\':' . "\r\n" . '            return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad);' . "\r\n" . '        case \'i\':' . "\r\n" . '        case \'d\':' . "\r\n" . '            number = (+value) | 0;' . "\r\n" . '            prefix = number < 0 ? \'-\' : positivePrefix;' . "\r\n" . '            value = prefix + pad(String(Math.abs(number)), precision, \'0\', false);' . "\r\n" . '            return justify(value, prefix, leftJustify, minWidth, zeroPad);' . "\r\n" . '        case \'e\':' . "\r\n" . '        case \'E\':' . "\r\n" . '        case \'f\':' . "\r\n" . '        case \'F\':' . "\r\n" . '        case \'g\':' . "\r\n" . '        case \'G\':' . "\r\n" . '            number = +value;' . "\r\n" . '            prefix = number < 0 ? \'-\' : positivePrefix;' . "\r\n" . '            method = [\'toExponential\', \'toFixed\', \'toPrecision\'][\'efg\'.indexOf(type.toLowerCase())];' . "\r\n" . '            textTransform = [\'toString\', \'toUpperCase\'][\'eEfFgG\'.indexOf(type) % 2];' . "\r\n" . '            value = prefix + Math.abs(number)[method](precision);' . "\r\n" . '            return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]();' . "\r\n" . '        default:' . "\r\n" . '            return substring;' . "\r\n" . '        }' . "\r\n" . '    };' . "\r\n" . ' ' . "\r\n" . '    return format.replace(regex, doFormat);' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function number_format (number, decimals, dec_point, thousands_sep) {' . "\r\n" . '    number = (number + \'\').replace(/[^0-9+\\-Ee.]/g, \'\');' . "\r\n" . '    var n = !isFinite(+number) ? 0 : +number,' . "\r\n" . '        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),' . "\r\n" . '        sep = (typeof thousands_sep === \'undefined\') ? \',\' : thousands_sep,' . "\r\n" . '        dec = (typeof dec_point === \'undefined\') ? \'.\' : dec_point,' . "\r\n" . '        s = \'\',' . "\r\n" . '        toFixedFix = function (n, prec) {' . "\r\n" . '            var k = Math.pow(10, prec);' . "\r\n" . '            return \'\' + Math.round(n * k) / k;' . "\r\n" . '        };' . "\r\n" . '    // Fix for IE parseFloat(0.55).toFixed(0) = 0;' . "\r\n" . '    s = (prec ? toFixedFix(n, prec) : \'\' + Math.round(n)).split(\'.\');' . "\r\n" . '    if (s[0].length > 3) {' . "\r\n" . '        s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep);' . "\r\n" . '    }' . "\r\n" . '    if ((s[1] || \'\').length < prec) {' . "\r\n" . '        s[1] = s[1] || \'\';' . "\r\n" . '        s[1] += new Array(prec - s[1].length + 1).join(\'0\');' . "\r\n" . '    }' . "\r\n" . '    return s.join(dec);' . "\r\n" . '}' . "\r\n" . '//格式化分钟为时分' . "\r\n" . 'function formatMinutes(minutes){' . "\r\n" . '   var day = parseInt(Math.floor(minutes / 1440));' . "\r\n" . '   var hour = day >0 ?Math.floor((minutes - day*1440)/60):Math.floor(minutes/60);  ' . "\r\n" . '   var minute = hour > 0? Math.floor(minutes -day*1440 - hour*60):minutes;' . "\r\n" . '   var time="";       ' . "\r\n" . '   if (day > 0) time += day + "天";' . "\r\n" . '   if (hour > 0) time += hour + "小时";' . "\r\n" . '   if (minute > 0) time += minute + "分";' . "\r\n" . '   return time;' . "\r\n" . '}' . "\r\n" . '    ' . "\r\n" . '//格式化秒数为时分秒' . "\r\n" . 'function formatSeconds(seconds) {' . "\r\n" . '   if(seconds >0){' . "\r\n" . '      var minutes = Math.floor(seconds/60);' . "\r\n" . '      seconds = seconds - minutes * 60;' . "\r\n" . '      return formatMinutes(minutes) + (seconds > 0 ? seconds + "秒" : "");' . "\r\n" . '  } ' . "\r\n" . '  return seconds;' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function array_diff (arr1) {' . "\r\n" . '    var retArr = {},' . "\r\n" . '        argl = arguments.length,' . "\r\n" . '        k1 = \'\',' . "\r\n" . '        i = 1,' . "\r\n" . '        k = \'\',' . "\r\n" . '        arr = {};' . "\r\n" . ' ' . "\r\n" . '    arr1keys: for (k1 in arr1) {' . "\r\n" . '        for (i = 1; i < argl; i++) {' . "\r\n" . '            arr = arguments[i];' . "\r\n" . '            for (k in arr) {' . "\r\n" . '                if (arr[k] === arr1[k1]) {' . "\r\n" . '                    // If it reaches here, it was found in at least one array, so try next value' . "\r\n" . '                    continue arr1keys;' . "\r\n" . '                }' . "\r\n" . '            }' . "\r\n" . '            retArr[k1] = arr1[k1];' . "\r\n" . '        }' . "\r\n" . '    }' . "\r\n" . ' ' . "\r\n" . '    return retArr;' . "\r\n" . '}' . "\r\n" . '' . "\r\n" . 'function setFont(fontSize)' . "\r\n" . '{' . "\r\n" . '	var ftsql = "UPDATE eq_font SET fontId =\'"+fontSize+"\' WHERE id=\'1\'";' . "\r\n" . '	rexseeDatabase.exec(ftsql,\'rexsee:enableq.db\');' . "\r\n" . '	rexseeBrowser.reload();' . "\r\n" . '}';

?>
