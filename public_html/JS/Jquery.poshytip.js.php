<?php
//dezend by http://www.yunlu99.com/
echo '/*' . "\n" . ' * Poshy Tip jQuery plugin v1.2' . "\n" . ' * http://vadikom.com/tools/poshy-tip-jquery-plugin-for-stylish-tooltips/' . "\n" . ' * Copyright 2010-2013, Vasil Dinkov, http://vadikom.com/' . "\n" . ' */' . "\n" . '' . "\n" . '(function($) {' . "\n" . '' . "\n" . '	var tips = [],' . "\n" . '		reBgImage = /^url\\(["\']?([^"\'\\)]*)["\']?\\);?$/i,' . "\n" . '		rePNG = /\\.png$/i,' . "\n" . '		ie6 = !!window.createPopup && document.documentElement.currentStyle.minWidth == \'undefined\';' . "\n" . '' . "\n" . '	// make sure the tips\' position is updated on resize' . "\n" . '	function handleWindowResize() {' . "\n" . '		$.each(tips, function() {' . "\n" . '			this.refresh(true);' . "\n" . '		});' . "\n" . '	}' . "\n" . '	$(window).resize(handleWindowResize);' . "\n" . '' . "\n" . '	$.Poshytip = function(elm, options) {' . "\n" . '		this.$elm = $(elm);' . "\n" . '		this.opts = $.extend({}, $.fn.poshytip.defaults, options);' . "\n" . '		this.$tip = $([\'<div class="\',this.opts.className,\'">\',' . "\n" . '				\'<div class="tip-inner tip-bg-image"></div>\',' . "\n" . '				\'<div class="tip-arrow tip-arrow-top tip-arrow-right tip-arrow-bottom tip-arrow-left"></div>\',' . "\n" . '			\'</div>\'].join(\'\')).appendTo(document.body);' . "\n" . '		this.$arrow = this.$tip.find(\'div.tip-arrow\');' . "\n" . '		this.$inner = this.$tip.find(\'div.tip-inner\');' . "\n" . '		this.disabled = false;' . "\n" . '		this.content = null;' . "\n" . '		this.init();' . "\n" . '	};' . "\n" . '' . "\n" . '	$.Poshytip.prototype = {' . "\n" . '		init: function() {' . "\n" . '			tips.push(this);' . "\n" . '' . "\n" . '			// save the original title and a reference to the Poshytip object' . "\n" . '			var title = this.$elm.attr(\'title\');' . "\n" . '			this.$elm.data(\'title.poshytip\', title !== undefined ? title : null)' . "\n" . '				.data(\'poshytip\', this);' . "\n" . '' . "\n" . '			// hook element events' . "\n" . '			if (this.opts.showOn != \'none\') {' . "\n" . '				this.$elm.bind({' . "\n" . '					\'mouseenter.poshytip\': $.proxy(this.mouseenter, this),' . "\n" . '					\'mouseleave.poshytip\': $.proxy(this.mouseleave, this)' . "\n" . '				});' . "\n" . '				switch (this.opts.showOn) {' . "\n" . '					case \'hover\':' . "\n" . '						if (this.opts.alignTo == \'cursor\')' . "\n" . '							this.$elm.bind(\'mousemove.poshytip\', $.proxy(this.mousemove, this));' . "\n" . '						if (this.opts.allowTipHover)' . "\n" . '							this.$tip.hover($.proxy(this.clearTimeouts, this), $.proxy(this.mouseleave, this));' . "\n" . '						break;' . "\n" . '					case \'focus\':' . "\n" . '						this.$elm.bind({' . "\n" . '							\'focus.poshytip\': $.proxy(this.showDelayed, this),' . "\n" . '							\'blur.poshytip\': $.proxy(this.hideDelayed, this)' . "\n" . '						});' . "\n" . '						break;' . "\n" . '				}' . "\n" . '			}' . "\n" . '		},' . "\n" . '		mouseenter: function(e) {' . "\n" . '			if (this.disabled)' . "\n" . '				return true;' . "\n" . '' . "\n" . '			this.$elm.attr(\'title\', \'\');' . "\n" . '			if (this.opts.showOn == \'focus\')' . "\n" . '				return true;' . "\n" . '' . "\n" . '			this.showDelayed();' . "\n" . '		},' . "\n" . '		mouseleave: function(e) {' . "\n" . '			if (this.disabled || this.asyncAnimating && (this.$tip[0] === e.relatedTarget || jQuery.contains(this.$tip[0], e.relatedTarget)))' . "\n" . '				return true;' . "\n" . '' . "\n" . '			if (!this.$tip.data(\'active\')) {' . "\n" . '				var title = this.$elm.data(\'title.poshytip\');' . "\n" . '				if (title !== null)' . "\n" . '					this.$elm.attr(\'title\', title);' . "\n" . '			}' . "\n" . '			if (this.opts.showOn == \'focus\')' . "\n" . '				return true;' . "\n" . '' . "\n" . '			this.hideDelayed();' . "\n" . '		},' . "\n" . '		mousemove: function(e) {' . "\n" . '			if (this.disabled)' . "\n" . '				return true;' . "\n" . '' . "\n" . '			this.eventX = e.pageX;' . "\n" . '			this.eventY = e.pageY;' . "\n" . '			if (this.opts.followCursor && this.$tip.data(\'active\')) {' . "\n" . '				this.calcPos();' . "\n" . '				this.$tip.css({left: this.pos.l, top: this.pos.t});' . "\n" . '				if (this.pos.arrow)' . "\n" . '					this.$arrow[0].className = \'tip-arrow tip-arrow-\' + this.pos.arrow;' . "\n" . '			}' . "\n" . '		},' . "\n" . '		show: function() {' . "\n" . '			if (this.disabled || this.$tip.data(\'active\'))' . "\n" . '				return;' . "\n" . '' . "\n" . '			this.reset();' . "\n" . '			this.update();' . "\n" . '' . "\n" . '			// don\'t proceed if we didn\'t get any content in update() (e.g. the element has an empty title attribute)' . "\n" . '			if (!this.content)' . "\n" . '				return;' . "\n" . '' . "\n" . '			this.display();' . "\n" . '			if (this.opts.timeOnScreen)' . "\n" . '				this.hideDelayed(this.opts.timeOnScreen);' . "\n" . '		},' . "\n" . '		showDelayed: function(timeout) {' . "\n" . '			this.clearTimeouts();' . "\n" . '			this.showTimeout = setTimeout($.proxy(this.show, this), typeof timeout == \'number\' ? timeout : this.opts.showTimeout);' . "\n" . '		},' . "\n" . '		hide: function() {' . "\n" . '			if (this.disabled || !this.$tip.data(\'active\'))' . "\n" . '				return;' . "\n" . '' . "\n" . '			this.display(true);' . "\n" . '		},' . "\n" . '		hideDelayed: function(timeout) {' . "\n" . '			this.clearTimeouts();' . "\n" . '			this.hideTimeout = setTimeout($.proxy(this.hide, this), typeof timeout == \'number\' ? timeout : this.opts.hideTimeout);' . "\n" . '		},' . "\n" . '		reset: function() {' . "\n" . '			this.$tip.queue([]).detach().css(\'visibility\', \'hidden\').data(\'active\', false);' . "\n" . '			this.$inner.find(\'*\').poshytip(\'hide\');' . "\n" . '			if (this.opts.fade)' . "\n" . '				this.$tip.css(\'opacity\', this.opacity);' . "\n" . '			this.$arrow[0].className = \'tip-arrow tip-arrow-top tip-arrow-right tip-arrow-bottom tip-arrow-left\';' . "\n" . '			this.asyncAnimating = false;' . "\n" . '		},' . "\n" . '		update: function(content, dontOverwriteOption) {' . "\n" . '			if (this.disabled)' . "\n" . '				return;' . "\n" . '' . "\n" . '			var async = content !== undefined;' . "\n" . '			if (async) {' . "\n" . '				if (!dontOverwriteOption)' . "\n" . '					this.opts.content = content;' . "\n" . '				if (!this.$tip.data(\'active\'))' . "\n" . '					return;' . "\n" . '			} else {' . "\n" . '				content = this.opts.content;' . "\n" . '			}' . "\n" . '' . "\n" . '			// update content only if it has been changed since last time' . "\n" . '			var self = this,' . "\n" . '				newContent = typeof content == \'function\' ?' . "\n" . '					content.call(this.$elm[0], function(newContent) {' . "\n" . '						self.update(newContent);' . "\n" . '					}) :' . "\n" . '					content == \'[title]\' ? this.$elm.data(\'title.poshytip\') : content;' . "\n" . '			if (this.content !== newContent) {' . "\n" . '				this.$inner.empty().append(newContent);' . "\n" . '				this.content = newContent;' . "\n" . '			}' . "\n" . '' . "\n" . '			this.refresh(async);' . "\n" . '		},' . "\n" . '		refresh: function(async) {' . "\n" . '			if (this.disabled)' . "\n" . '				return;' . "\n" . '' . "\n" . '			if (async) {' . "\n" . '				if (!this.$tip.data(\'active\'))' . "\n" . '					return;' . "\n" . '				// save current position as we will need to animate' . "\n" . '				var currPos = {left: this.$tip.css(\'left\'), top: this.$tip.css(\'top\')};' . "\n" . '			}' . "\n" . '' . "\n" . '			// reset position to avoid text wrapping, etc.' . "\n" . '			this.$tip.css({left: 0, top: 0}).appendTo(document.body);' . "\n" . '' . "\n" . '			// save default opacity' . "\n" . '			if (this.opacity === undefined)' . "\n" . '				this.opacity = this.$tip.css(\'opacity\');' . "\n" . '' . "\n" . '			// check for images - this code is here (i.e. executed each time we show the tip and not on init) due to some browser inconsistencies' . "\n" . '			var bgImage = this.$tip.css(\'background-image\').match(reBgImage),' . "\n" . '				arrow = this.$arrow.css(\'background-image\').match(reBgImage);' . "\n" . '' . "\n" . '			if (bgImage) {' . "\n" . '				var bgImagePNG = rePNG.test(bgImage[1]);' . "\n" . '				// fallback to background-color/padding/border in IE6 if a PNG is used' . "\n" . '				if (ie6 && bgImagePNG) {' . "\n" . '					this.$tip.css(\'background-image\', \'none\');' . "\n" . '					this.$inner.css({margin: 0, border: 0, padding: 0});' . "\n" . '					bgImage = bgImagePNG = false;' . "\n" . '				} else {' . "\n" . '					this.$tip.prepend(\'<table class="tip-table" border="0" cellpadding="0" cellspacing="0"><tr><td class="tip-top tip-bg-image" colspan="2"><span></span></td><td class="tip-right tip-bg-image" rowspan="2"><span></span></td></tr><tr><td class="tip-left tip-bg-image" rowspan="2"><span></span></td><td></td></tr><tr><td class="tip-bottom tip-bg-image" colspan="2"><span></span></td></tr></table>\')' . "\n" . '						.css({border: 0, padding: 0, \'background-image\': \'none\', \'background-color\': \'transparent\'})' . "\n" . '						.find(\'.tip-bg-image\').css(\'background-image\', \'url("\' + bgImage[1] +\'")\').end()' . "\n" . '						.find(\'td\').eq(3).append(this.$inner);' . "\n" . '				}' . "\n" . '				// disable fade effect in IE due to Alpha filter + translucent PNG issue' . "\n" . '				if (bgImagePNG && !$.support.opacity)' . "\n" . '					this.opts.fade = false;' . "\n" . '			}' . "\n" . '			// IE arrow fixes' . "\n" . '			if (arrow && !$.support.opacity) {' . "\n" . '				// disable arrow in IE6 if using a PNG' . "\n" . '				if (ie6 && rePNG.test(arrow[1])) {' . "\n" . '					arrow = false;' . "\n" . '					this.$arrow.css(\'background-image\', \'none\');' . "\n" . '				}' . "\n" . '				// disable fade effect in IE due to Alpha filter + translucent PNG issue' . "\n" . '				this.opts.fade = false;' . "\n" . '			}' . "\n" . '' . "\n" . '			var $table = this.$tip.find(\'> table.tip-table\');' . "\n" . '			if (ie6) {' . "\n" . '				// fix min/max-width in IE6' . "\n" . '				this.$tip[0].style.width = \'\';' . "\n" . '				$table.width(\'auto\').find(\'td\').eq(3).width(\'auto\');' . "\n" . '				var tipW = this.$tip.width(),' . "\n" . '					minW = parseInt(this.$tip.css(\'min-width\')),' . "\n" . '					maxW = parseInt(this.$tip.css(\'max-width\'));' . "\n" . '				if (!isNaN(minW) && tipW < minW)' . "\n" . '					tipW = minW;' . "\n" . '				else if (!isNaN(maxW) && tipW > maxW)' . "\n" . '					tipW = maxW;' . "\n" . '				this.$tip.add($table).width(tipW).eq(0).find(\'td\').eq(3).width(\'100%\');' . "\n" . '			} else if ($table[0]) {' . "\n" . '				// fix the table width if we are using a background image' . "\n" . '				// IE9, FF4 use float numbers for width/height so use getComputedStyle for them to avoid text wrapping' . "\n" . '				// for details look at: http://vadikom.com/dailies/offsetwidth-offsetheight-useless-in-ie9-firefox4/' . "\n" . '				$table.width(\'auto\').find(\'td\').eq(3).width(\'auto\').end().end().width(document.defaultView && document.defaultView.getComputedStyle && parseFloat(document.defaultView.getComputedStyle(this.$tip[0], null).width) || this.$tip.width()).find(\'td\').eq(3).width(\'100%\');' . "\n" . '			}' . "\n" . '			this.tipOuterW = this.$tip.outerWidth();' . "\n" . '			this.tipOuterH = this.$tip.outerHeight();' . "\n" . '' . "\n" . '			this.calcPos();' . "\n" . '' . "\n" . '			// position and show the arrow image' . "\n" . '			if (arrow && this.pos.arrow) {' . "\n" . '				this.$arrow[0].className = \'tip-arrow tip-arrow-\' + this.pos.arrow;' . "\n" . '				this.$arrow.css(\'visibility\', \'inherit\');' . "\n" . '			}' . "\n" . '' . "\n" . '			if (async && this.opts.refreshAniDuration) {' . "\n" . '				this.asyncAnimating = true;' . "\n" . '				var self = this;' . "\n" . '				this.$tip.css(currPos).animate({left: this.pos.l, top: this.pos.t}, this.opts.refreshAniDuration, function() { self.asyncAnimating = false; });' . "\n" . '			} else {' . "\n" . '				this.$tip.css({left: this.pos.l, top: this.pos.t});' . "\n" . '			}' . "\n" . '		},' . "\n" . '		display: function(hide) {' . "\n" . '			var active = this.$tip.data(\'active\');' . "\n" . '			if (active && !hide || !active && hide)' . "\n" . '				return;' . "\n" . '' . "\n" . '			this.$tip.stop();' . "\n" . '			if ((this.opts.slide && this.pos.arrow || this.opts.fade) && (hide && this.opts.hideAniDuration || !hide && this.opts.showAniDuration)) {' . "\n" . '				var from = {}, to = {};' . "\n" . '				// this.pos.arrow is only undefined when alignX == alignY == \'center\' and we don\'t need to slide in that rare case' . "\n" . '				if (this.opts.slide && this.pos.arrow) {' . "\n" . '					var prop, arr;' . "\n" . '					if (this.pos.arrow == \'bottom\' || this.pos.arrow == \'top\') {' . "\n" . '						prop = \'top\';' . "\n" . '						arr = \'bottom\';' . "\n" . '					} else {' . "\n" . '						prop = \'left\';' . "\n" . '						arr = \'right\';' . "\n" . '					}' . "\n" . '					var val = parseInt(this.$tip.css(prop));' . "\n" . '					from[prop] = val + (hide ? 0 : (this.pos.arrow == arr ? -this.opts.slideOffset : this.opts.slideOffset));' . "\n" . '					to[prop] = val + (hide ? (this.pos.arrow == arr ? this.opts.slideOffset : -this.opts.slideOffset) : 0) + \'px\';' . "\n" . '				}' . "\n" . '				if (this.opts.fade) {' . "\n" . '					from.opacity = hide ? this.$tip.css(\'opacity\') : 0;' . "\n" . '					to.opacity = hide ? 0 : this.opacity;' . "\n" . '				}' . "\n" . '				this.$tip.css(from).animate(to, this.opts[hide ? \'hideAniDuration\' : \'showAniDuration\']);' . "\n" . '			}' . "\n" . '			hide ? this.$tip.queue($.proxy(this.reset, this)) : this.$tip.css(\'visibility\', \'inherit\');' . "\n" . '			if (active) {' . "\n" . '				var title = this.$elm.data(\'title.poshytip\');' . "\n" . '				if (title !== null)' . "\n" . '					this.$elm.attr(\'title\', title);' . "\n" . '			}' . "\n" . '			this.$tip.data(\'active\', !active);' . "\n" . '		},' . "\n" . '		disable: function() {' . "\n" . '			this.reset();' . "\n" . '			this.disabled = true;' . "\n" . '		},' . "\n" . '		enable: function() {' . "\n" . '			this.disabled = false;' . "\n" . '		},' . "\n" . '		destroy: function() {' . "\n" . '			this.reset();' . "\n" . '			this.$tip.remove();' . "\n" . '			delete this.$tip;' . "\n" . '			this.content = null;' . "\n" . '			this.$elm.unbind(\'.poshytip\').removeData(\'title.poshytip\').removeData(\'poshytip\');' . "\n" . '			tips.splice($.inArray(this, tips), 1);' . "\n" . '		},' . "\n" . '		clearTimeouts: function() {' . "\n" . '			if (this.showTimeout) {' . "\n" . '				clearTimeout(this.showTimeout);' . "\n" . '				this.showTimeout = 0;' . "\n" . '			}' . "\n" . '			if (this.hideTimeout) {' . "\n" . '				clearTimeout(this.hideTimeout);' . "\n" . '				this.hideTimeout = 0;' . "\n" . '			}' . "\n" . '		},' . "\n" . '		calcPos: function() {' . "\n" . '			var pos = {l: 0, t: 0, arrow: \'\'},' . "\n" . '				$win = $(window),' . "\n" . '				win = {' . "\n" . '					l: $win.scrollLeft(),' . "\n" . '					t: $win.scrollTop(),' . "\n" . '					w: $win.width(),' . "\n" . '					h: $win.height()' . "\n" . '				}, xL, xC, xR, yT, yC, yB;' . "\n" . '			if (this.opts.alignTo == \'cursor\') {' . "\n" . '				xL = xC = xR = this.eventX;' . "\n" . '				yT = yC = yB = this.eventY;' . "\n" . '			} else { // this.opts.alignTo == \'target\'' . "\n" . '				var elmOffset = this.$elm.offset(),' . "\n" . '					elm = {' . "\n" . '						l: elmOffset.left,' . "\n" . '						t: elmOffset.top,' . "\n" . '						w: this.$elm.outerWidth(),' . "\n" . '						h: this.$elm.outerHeight()' . "\n" . '					};' . "\n" . '				xL = elm.l + (this.opts.alignX != \'inner-right\' ? 0 : elm.w);	// left edge' . "\n" . '				xC = xL + Math.floor(elm.w / 2);				// h center' . "\n" . '				xR = xL + (this.opts.alignX != \'inner-left\' ? elm.w : 0);	// right edge' . "\n" . '				yT = elm.t + (this.opts.alignY != \'inner-bottom\' ? 0 : elm.h);	// top edge' . "\n" . '				yC = yT + Math.floor(elm.h / 2);				// v center' . "\n" . '				yB = yT + (this.opts.alignY != \'inner-top\' ? elm.h : 0);	// bottom edge' . "\n" . '			}' . "\n" . '' . "\n" . '			// keep in viewport and calc arrow position' . "\n" . '			switch (this.opts.alignX) {' . "\n" . '				case \'right\':' . "\n" . '				case \'inner-left\':' . "\n" . '					pos.l = xR + this.opts.offsetX;' . "\n" . '					if (this.opts.keepInViewport && pos.l + this.tipOuterW > win.l + win.w)' . "\n" . '						pos.l = win.l + win.w - this.tipOuterW;' . "\n" . '					if (this.opts.alignX == \'right\' || this.opts.alignY == \'center\')' . "\n" . '						pos.arrow = \'left\';' . "\n" . '					break;' . "\n" . '				case \'center\':' . "\n" . '					pos.l = xC - Math.floor(this.tipOuterW / 2);' . "\n" . '					if (this.opts.keepInViewport) {' . "\n" . '						if (pos.l + this.tipOuterW > win.l + win.w)' . "\n" . '							pos.l = win.l + win.w - this.tipOuterW;' . "\n" . '						else if (pos.l < win.l)' . "\n" . '							pos.l = win.l;' . "\n" . '					}' . "\n" . '					break;' . "\n" . '				default: // \'left\' || \'inner-right\'' . "\n" . '					pos.l = xL - this.tipOuterW - this.opts.offsetX;' . "\n" . '					if (this.opts.keepInViewport && pos.l < win.l)' . "\n" . '						pos.l = win.l;' . "\n" . '					if (this.opts.alignX == \'left\' || this.opts.alignY == \'center\')' . "\n" . '						pos.arrow = \'right\';' . "\n" . '			}' . "\n" . '			switch (this.opts.alignY) {' . "\n" . '				case \'bottom\':' . "\n" . '				case \'inner-top\':' . "\n" . '					pos.t = yB + this.opts.offsetY;' . "\n" . '					// \'left\' and \'right\' need priority for \'target\'' . "\n" . '					if (!pos.arrow || this.opts.alignTo == \'cursor\')' . "\n" . '						pos.arrow = \'top\';' . "\n" . '					if (this.opts.keepInViewport && pos.t + this.tipOuterH > win.t + win.h) {' . "\n" . '						pos.t = yT - this.tipOuterH - this.opts.offsetY;' . "\n" . '						if (pos.arrow == \'top\')' . "\n" . '							pos.arrow = \'bottom\';' . "\n" . '					}' . "\n" . '					break;' . "\n" . '				case \'center\':' . "\n" . '					pos.t = yC - Math.floor(this.tipOuterH / 2);' . "\n" . '					if (this.opts.keepInViewport) {' . "\n" . '						if (pos.t + this.tipOuterH > win.t + win.h)' . "\n" . '							pos.t = win.t + win.h - this.tipOuterH;' . "\n" . '						else if (pos.t < win.t)' . "\n" . '							pos.t = win.t;' . "\n" . '					}' . "\n" . '					break;' . "\n" . '				default: // \'top\' || \'inner-bottom\'' . "\n" . '					pos.t = yT - this.tipOuterH - this.opts.offsetY;' . "\n" . '					// \'left\' and \'right\' need priority for \'target\'' . "\n" . '					if (!pos.arrow || this.opts.alignTo == \'cursor\')' . "\n" . '						pos.arrow = \'bottom\';' . "\n" . '					if (this.opts.keepInViewport && pos.t < win.t) {' . "\n" . '						pos.t = yB + this.opts.offsetY;' . "\n" . '						if (pos.arrow == \'bottom\')' . "\n" . '							pos.arrow = \'top\';' . "\n" . '					}' . "\n" . '			}' . "\n" . '			this.pos = pos;' . "\n" . '		}' . "\n" . '	};' . "\n" . '' . "\n" . '	$.fn.poshytip = function(options) {' . "\n" . '		if (typeof options == \'string\') {' . "\n" . '			var args = arguments,' . "\n" . '				method = options;' . "\n" . '			Array.prototype.shift.call(args);' . "\n" . '			// unhook live events if \'destroy\' is called' . "\n" . '			if (method == \'destroy\') {' . "\n" . '				this.die ?' . "\n" . '					this.die(\'mouseenter.poshytip\').die(\'focus.poshytip\') :' . "\n" . '					$(document).undelegate(this.selector, \'mouseenter.poshytip\').undelegate(this.selector, \'focus.poshytip\');' . "\n" . '			}' . "\n" . '			return this.each(function() {' . "\n" . '				var poshytip = $(this).data(\'poshytip\');' . "\n" . '				if (poshytip && poshytip[method])' . "\n" . '					poshytip[method].apply(poshytip, args);' . "\n" . '			});' . "\n" . '		}' . "\n" . '' . "\n" . '		var opts = $.extend({}, $.fn.poshytip.defaults, options);' . "\n" . '' . "\n" . '		// generate CSS for this tip class if not already generated' . "\n" . '		if (!$(\'#poshytip-css-\' + opts.className)[0])' . "\n" . '			$([\'<style id="poshytip-css-\',opts.className,\'" type="text/css">\',' . "\n" . '				\'div.\',opts.className,\'{visibility:hidden;position:absolute;top:0;left:0;}\',' . "\n" . '				\'div.\',opts.className,\' table.tip-table, div.\',opts.className,\' table.tip-table td{margin:0;font-family:inherit;font-size:inherit;font-weight:inherit;font-style:inherit;font-variant:inherit;vertical-align:middle;}\',' . "\n" . '				\'div.\',opts.className,\' td.tip-bg-image span{display:block;font:1px/1px sans-serif;height:\',opts.bgImageFrameSize,\'px;width:\',opts.bgImageFrameSize,\'px;overflow:hidden;}\',' . "\n" . '				\'div.\',opts.className,\' td.tip-right{background-position:100% 0;}\',' . "\n" . '				\'div.\',opts.className,\' td.tip-bottom{background-position:100% 100%;}\',' . "\n" . '				\'div.\',opts.className,\' td.tip-left{background-position:0 100%;}\',' . "\n" . '				\'div.\',opts.className,\' div.tip-inner{background-position:-\',opts.bgImageFrameSize,\'px -\',opts.bgImageFrameSize,\'px;}\',' . "\n" . '				\'div.\',opts.className,\' div.tip-arrow{visibility:hidden;position:absolute;overflow:hidden;font:1px/1px sans-serif;}\',' . "\n" . '			\'</style>\'].join(\'\')).appendTo(\'head\');' . "\n" . '' . "\n" . '		// check if we need to hook live events' . "\n" . '		if (opts.liveEvents && opts.showOn != \'none\') {' . "\n" . '			var handler,' . "\n" . '				deadOpts = $.extend({}, opts, { liveEvents: false });' . "\n" . '			switch (opts.showOn) {' . "\n" . '				case \'hover\':' . "\n" . '					handler = function() {' . "\n" . '						var $this = $(this);' . "\n" . '						if (!$this.data(\'poshytip\'))' . "\n" . '							$this.poshytip(deadOpts).poshytip(\'mouseenter\');' . "\n" . '					};' . "\n" . '					// support 1.4.2+ & 1.9+' . "\n" . '					this.live ?' . "\n" . '						this.live(\'mouseenter.poshytip\', handler) :' . "\n" . '						$(document).delegate(this.selector, \'mouseenter.poshytip\', handler);' . "\n" . '					break;' . "\n" . '				case \'focus\':' . "\n" . '					handler = function() {' . "\n" . '						var $this = $(this);' . "\n" . '						if (!$this.data(\'poshytip\'))' . "\n" . '							$this.poshytip(deadOpts).poshytip(\'showDelayed\');' . "\n" . '					};' . "\n" . '					this.live ?' . "\n" . '						this.live(\'focus.poshytip\', handler) :' . "\n" . '						$(document).delegate(this.selector, \'focus.poshytip\', handler);' . "\n" . '					break;' . "\n" . '			}' . "\n" . '			return this;' . "\n" . '		}' . "\n" . '' . "\n" . '		return this.each(function() {' . "\n" . '			new $.Poshytip(this, opts);' . "\n" . '		});' . "\n" . '	}' . "\n" . '' . "\n" . '	// default settings' . "\n" . '	$.fn.poshytip.defaults = {' . "\n" . '		content: 		\'[title]\',	// content to display (\'[title]\', \'string\', element, function(updateCallback){...}, jQuery)' . "\n" . '		className:		\'tip-yellow\',	// class for the tips' . "\n" . '		bgImageFrameSize:	10,		// size in pixels for the background-image (if set in CSS) frame around the inner content of the tip' . "\n" . '		showTimeout:		500,		// timeout before showing the tip (in milliseconds 1000 == 1 second)' . "\n" . '		hideTimeout:		100,		// timeout before hiding the tip' . "\n" . '		timeOnScreen:		0,		// timeout before automatically hiding the tip after showing it (set to > 0 in order to activate)' . "\n" . '		showOn:			\'hover\',	// handler for showing the tip (\'hover\', \'focus\', \'none\') - use \'none\' to trigger it manually' . "\n" . '		liveEvents:		false,		// use live events' . "\n" . '		alignTo:		\'cursor\',	// align/position the tip relative to (\'cursor\', \'target\')' . "\n" . '		alignX:			\'right\',	// horizontal alignment for the tip relative to the mouse cursor or the target element' . "\n" . '							// (\'right\', \'center\', \'left\', \'inner-left\', \'inner-right\') - \'inner-*\' matter if alignTo:\'target\'' . "\n" . '		alignY:			\'top\',		// vertical alignment for the tip relative to the mouse cursor or the target element' . "\n" . '							// (\'bottom\', \'center\', \'top\', \'inner-bottom\', \'inner-top\') - \'inner-*\' matter if alignTo:\'target\'' . "\n" . '		offsetX:		-22,		// offset X pixels from the default position - doesn\'t matter if alignX:\'center\'' . "\n" . '		offsetY:		18,		// offset Y pixels from the default position - doesn\'t matter if alignY:\'center\'' . "\n" . '		keepInViewport:		true,		// reposition the tooltip if needed to make sure it always appears inside the viewport' . "\n" . '		allowTipHover:		true,		// allow hovering the tip without hiding it onmouseout of the target - matters only if showOn:\'hover\'' . "\n" . '		followCursor:		false,		// if the tip should follow the cursor - matters only if showOn:\'hover\' and alignTo:\'cursor\'' . "\n" . '		fade: 			true,		// use fade animation' . "\n" . '		slide: 			true,		// use slide animation' . "\n" . '		slideOffset: 		8,		// slide animation offset' . "\n" . '		showAniDuration: 	300,		// show animation duration - set to 0 if you don\'t want show animation' . "\n" . '		hideAniDuration: 	300,		// hide animation duration - set to 0 if you don\'t want hide animation' . "\n" . '		refreshAniDuration:	200		// refresh animation duration - set to 0 if you don\'t want animation when updating the tooltip asynchronously' . "\n" . '	};' . "\n" . '' . "\n" . '})(jQuery);';

?>
