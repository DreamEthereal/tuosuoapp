<?php
//dezend by http://www.yunlu99.com/
echo '/*' . "\n" . '' . "\n" . '	jQuery Tags Input Plugin 1.3.3' . "\n" . '	' . "\n" . '	Copyright (c) 2011 XOXCO, Inc' . "\n" . '	' . "\n" . '	Documentation for this plugin lives here:' . "\n" . '	http://xoxco.com/clickable/jquery-tags-input' . "\n" . '	' . "\n" . '	Licensed under the MIT license:' . "\n" . '	http://www.opensource.org/licenses/mit-license.php' . "\n" . '' . "\n" . '	ben@xoxco.com' . "\n" . '' . "\n" . '*/' . "\n" . '' . "\n" . '(function($) {' . "\n" . '' . "\n" . '	var delimiter = new Array();' . "\n" . '	var tags_callbacks = new Array();' . "\n" . '	$.fn.doAutosize = function(o){' . "\n" . '	    var minWidth = $(this).data(\'minwidth\'),' . "\n" . '	        maxWidth = $(this).data(\'maxwidth\'),' . "\n" . '	        val = \'\',' . "\n" . '	        input = $(this),' . "\n" . '	        testSubject = $(\'#\'+$(this).data(\'tester_id\'));' . "\n" . '	' . "\n" . '	    if (val === (val = input.val())) {return;}' . "\n" . '	' . "\n" . '	    // Enter new content into testSubject' . "\n" . '	    var escaped = val.replace(/&/g, \'&amp;\').replace(/\\s/g,\' \').replace(/</g, \'&lt;\').replace(/>/g, \'&gt;\');' . "\n" . '	    testSubject.html(escaped);' . "\n" . '	    // Calculate new width + whether to change' . "\n" . '	    var testerWidth = testSubject.width(),' . "\n" . '	        newWidth = (testerWidth + o.comfortZone) >= minWidth ? testerWidth + o.comfortZone : minWidth,' . "\n" . '	        currentWidth = input.width(),' . "\n" . '	        isValidWidthChange = (newWidth < currentWidth && newWidth >= minWidth)' . "\n" . '	                             || (newWidth > minWidth && newWidth < maxWidth);' . "\n" . '	' . "\n" . '	    // Animate width' . "\n" . '	    if (isValidWidthChange) {' . "\n" . '	        input.width(newWidth);' . "\n" . '	    }' . "\n" . '' . "\n" . '' . "\n" . '  };' . "\n" . '  $.fn.resetAutosize = function(options){' . "\n" . '    // alert(JSON.stringify(options));' . "\n" . '    var minWidth =  $(this).data(\'minwidth\') || options.minInputWidth || $(this).width(),' . "\n" . '        maxWidth = $(this).data(\'maxwidth\') || options.maxInputWidth || ($(this).closest(\'.tagsinput\').width() - options.inputPadding),' . "\n" . '        val = \'\',' . "\n" . '        input = $(this),' . "\n" . '        testSubject = $(\'<tester/>\').css({' . "\n" . '            position: \'absolute\',' . "\n" . '            top: -9999,' . "\n" . '            left: -9999,' . "\n" . '            width: \'auto\',' . "\n" . '            fontSize: input.css(\'fontSize\'),' . "\n" . '            fontFamily: input.css(\'fontFamily\'),' . "\n" . '            fontWeight: input.css(\'fontWeight\'),' . "\n" . '            letterSpacing: input.css(\'letterSpacing\'),' . "\n" . '            whiteSpace: \'nowrap\'' . "\n" . '        }),' . "\n" . '        testerId = $(this).attr(\'id\')+\'_autosize_tester\';' . "\n" . '    if(! $(\'#\'+testerId).length > 0){' . "\n" . '      testSubject.attr(\'id\', testerId);' . "\n" . '      testSubject.appendTo(\'body\');' . "\n" . '    }' . "\n" . '' . "\n" . '    input.data(\'minwidth\', minWidth);' . "\n" . '    input.data(\'maxwidth\', maxWidth);' . "\n" . '    input.data(\'tester_id\', testerId);' . "\n" . '    input.css(\'width\', minWidth);' . "\n" . '  };' . "\n" . '  ' . "\n" . '	$.fn.addTag = function(value,options) {' . "\n" . '			options = jQuery.extend({focus:false,callback:true},options);' . "\n" . '			this.each(function() { ' . "\n" . '				var id = $(this).attr(\'id\');' . "\n" . '' . "\n" . '				var tagslist = $(this).val().split(delimiter[id]);' . "\n" . '				if (tagslist[0] == \'\') { ' . "\n" . '					tagslist = new Array();' . "\n" . '				}' . "\n" . '' . "\n" . '				value = jQuery.trim(value);' . "\n" . '		' . "\n" . '				if (options.unique) {' . "\n" . '					var skipTag = $(this).tagExist(value);' . "\n" . '					if(skipTag == true) {' . "\n" . '					    //Marks fake input as not_valid to let styling it' . "\n" . '    				    $(\'#\'+id+\'_tag\').addClass(\'not_valid\');' . "\n" . '    				}' . "\n" . '				} else {' . "\n" . '					var skipTag = false; ' . "\n" . '				}' . "\n" . '				' . "\n" . '				if (value !=\'\' && skipTag != true) { ' . "\n" . '                    $(\'<span>\').addClass(\'tag\').append(' . "\n" . '                        $(\'<span>\').text(value).append(\'&nbsp;&nbsp;\'),' . "\n" . '                        $(\'<a>\', {' . "\n" . '                            href  : \'#\',' . "\n" . '                            title : \'Removing tag\',' . "\n" . '                            text  : \'x\'' . "\n" . '                        }).click(function () {' . "\n" . '                            return $(\'#\' + id).removeTag(escape(value));' . "\n" . '                        })' . "\n" . '                    ).insertBefore(\'#\' + id + \'_addTag\');' . "\n" . '' . "\n" . '					tagslist.push(value);' . "\n" . '				' . "\n" . '					$(\'#\'+id+\'_tag\').val(\'\');' . "\n" . '					if (options.focus) {' . "\n" . '						$(\'#\'+id+\'_tag\').focus();' . "\n" . '					} else {		' . "\n" . '						$(\'#\'+id+\'_tag\').blur();' . "\n" . '					}' . "\n" . '					' . "\n" . '					$.fn.tagsInput.updateTagsField(this,tagslist);' . "\n" . '					' . "\n" . '					if (options.callback && tags_callbacks[id] && tags_callbacks[id][\'onAddTag\']) {' . "\n" . '						var f = tags_callbacks[id][\'onAddTag\'];' . "\n" . '						f.call(this, value);' . "\n" . '					}' . "\n" . '					if(tags_callbacks[id] && tags_callbacks[id][\'onChange\'])' . "\n" . '					{' . "\n" . '						var i = tagslist.length;' . "\n" . '						var f = tags_callbacks[id][\'onChange\'];' . "\n" . '						f.call(this, $(this), tagslist[i-1]);' . "\n" . '					}					' . "\n" . '				}' . "\n" . '		' . "\n" . '			});		' . "\n" . '			' . "\n" . '			return false;' . "\n" . '		};' . "\n" . '		' . "\n" . '	$.fn.removeTag = function(value) { ' . "\n" . '			value = unescape(value);' . "\n" . '			this.each(function() { ' . "\n" . '				var id = $(this).attr(\'id\');' . "\n" . '	' . "\n" . '				var old = $(this).val().split(delimiter[id]);' . "\n" . '					' . "\n" . '				$(\'#\'+id+\'_tagsinput .tag\').remove();' . "\n" . '				str = \'\';' . "\n" . '				for (i=0; i< old.length; i++) { ' . "\n" . '					if (old[i]!=value) { ' . "\n" . '						str = str + delimiter[id] +old[i];' . "\n" . '					}' . "\n" . '				}' . "\n" . '				' . "\n" . '				$.fn.tagsInput.importTags(this,str);' . "\n" . '' . "\n" . '				if (tags_callbacks[id] && tags_callbacks[id][\'onRemoveTag\']) {' . "\n" . '					var f = tags_callbacks[id][\'onRemoveTag\'];' . "\n" . '					f.call(this, value);' . "\n" . '				}' . "\n" . '			});' . "\n" . '					' . "\n" . '			return false;' . "\n" . '		};' . "\n" . '	' . "\n" . '	$.fn.tagExist = function(val) {' . "\n" . '		var id = $(this).attr(\'id\');' . "\n" . '		var tagslist = $(this).val().split(delimiter[id]);' . "\n" . '		return (jQuery.inArray(val, tagslist) >= 0); //true when tag exists, false when not' . "\n" . '	};' . "\n" . '	' . "\n" . '	// clear all existing tags and import new ones from a string' . "\n" . '	$.fn.importTags = function(str) {' . "\n" . '                id = $(this).attr(\'id\');' . "\n" . '		$(\'#\'+id+\'_tagsinput .tag\').remove();' . "\n" . '		$.fn.tagsInput.importTags(this,str);' . "\n" . '	}' . "\n" . '		' . "\n" . '	$.fn.tagsInput = function(options) { ' . "\n" . '    var settings = jQuery.extend({' . "\n" . '      interactive:true,' . "\n" . '      defaultText:\'\',' . "\n" . '      minChars:0,' . "\n" . '      width:\'300px\',' . "\n" . '      height:\'100px\',' . "\n" . '      autocomplete: {selectFirst: false },' . "\n" . '      \'hide\':true,' . "\n" . '      \'delimiter\':\',\',' . "\n" . '      \'unique\':true,' . "\n" . '      removeWithBackspace:true,' . "\n" . '      placeholderColor:\'#666666\',' . "\n" . '      autosize: true,' . "\n" . '      comfortZone: 20,' . "\n" . '      inputPadding: 6*2' . "\n" . '    },options);' . "\n" . '' . "\n" . '		this.each(function() { ' . "\n" . '			if (settings.hide) { ' . "\n" . '				$(this).hide();				' . "\n" . '			}' . "\n" . '			var id = $(this).attr(\'id\');' . "\n" . '			if (!id || delimiter[$(this).attr(\'id\')]) {' . "\n" . '				id = $(this).attr(\'id\', \'tags\' + new Date().getTime()).attr(\'id\');' . "\n" . '			}' . "\n" . '			' . "\n" . '			var data = jQuery.extend({' . "\n" . '				pid:id,' . "\n" . '				real_input: \'#\'+id,' . "\n" . '				holder: \'#\'+id+\'_tagsinput\',' . "\n" . '				input_wrapper: \'#\'+id+\'_addTag\',' . "\n" . '				fake_input: \'#\'+id+\'_tag\'' . "\n" . '			},settings);' . "\n" . '	' . "\n" . '			delimiter[id] = data.delimiter;' . "\n" . '			' . "\n" . '			if (settings.onAddTag || settings.onRemoveTag || settings.onChange) {' . "\n" . '				tags_callbacks[id] = new Array();' . "\n" . '				tags_callbacks[id][\'onAddTag\'] = settings.onAddTag;' . "\n" . '				tags_callbacks[id][\'onRemoveTag\'] = settings.onRemoveTag;' . "\n" . '				tags_callbacks[id][\'onChange\'] = settings.onChange;' . "\n" . '			}' . "\n" . '	' . "\n" . '			var markup = \'<div id="\'+id+\'_tagsinput" class="tagsinput"><div id="\'+id+\'_addTag">\';' . "\n" . '			' . "\n" . '			if (settings.interactive) {' . "\n" . '				markup = markup + \'<input id="\'+id+\'_tag" value="" data-default="\'+settings.defaultText+\'" />\';' . "\n" . '			}' . "\n" . '			' . "\n" . '			markup = markup + \'</div><div class="tags_clear"></div></div>\';' . "\n" . '			' . "\n" . '			$(markup).insertAfter(this);' . "\n" . '' . "\n" . '			$(data.holder).css(\'width\',settings.width);' . "\n" . '			$(data.holder).css(\'min-height\',settings.height);' . "\n" . '			$(data.holder).css(\'height\',\'100%\');' . "\n" . '	' . "\n" . '			if ($(data.real_input).val()!=\'\') { ' . "\n" . '				$.fn.tagsInput.importTags($(data.real_input),$(data.real_input).val());' . "\n" . '			}		' . "\n" . '			if (settings.interactive) { ' . "\n" . '				$(data.fake_input).val($(data.fake_input).attr(\'data-default\'));' . "\n" . '				$(data.fake_input).css(\'color\',settings.placeholderColor);' . "\n" . '		        $(data.fake_input).resetAutosize(settings);' . "\n" . '		' . "\n" . '				$(data.holder).bind(\'click\',data,function(event) {' . "\n" . '					$(event.data.fake_input).focus();' . "\n" . '				});' . "\n" . '			' . "\n" . '				$(data.fake_input).bind(\'focus\',data,function(event) {' . "\n" . '					if ($(event.data.fake_input).val()==$(event.data.fake_input).attr(\'data-default\')) { ' . "\n" . '						$(event.data.fake_input).val(\'\');' . "\n" . '					}' . "\n" . '					$(event.data.fake_input).css(\'color\',\'#000000\');		' . "\n" . '				});' . "\n" . '						' . "\n" . '				if (settings.autocomplete_url != undefined) {' . "\n" . '					autocomplete_options = {source: settings.autocomplete_url};' . "\n" . '					for (attrname in settings.autocomplete) { ' . "\n" . '						autocomplete_options[attrname] = settings.autocomplete[attrname]; ' . "\n" . '					}' . "\n" . '				' . "\n" . '					if (jQuery.Autocompleter !== undefined) {' . "\n" . '						$(data.fake_input).autocomplete(settings.autocomplete_url, settings.autocomplete);' . "\n" . '						$(data.fake_input).bind(\'result\',data,function(event,data,formatted) {' . "\n" . '							if (data) {' . "\n" . '								$(\'#\'+id).addTag(data[0] + "",{focus:true,unique:(settings.unique)});' . "\n" . '							}' . "\n" . '					  	});' . "\n" . '					} else if (jQuery.ui.autocomplete !== undefined) {' . "\n" . '						$(data.fake_input).autocomplete(autocomplete_options);' . "\n" . '						$(data.fake_input).bind(\'autocompleteselect\',data,function(event,ui) {' . "\n" . '							$(event.data.real_input).addTag(ui.item.value,{focus:true,unique:(settings.unique)});' . "\n" . '							return false;' . "\n" . '						});' . "\n" . '					}' . "\n" . '				' . "\n" . '					' . "\n" . '				} else {' . "\n" . '						// if a user tabs out of the field, create a new tag' . "\n" . '						// this is only available if autocomplete is not used.' . "\n" . '						$(data.fake_input).bind(\'blur\',data,function(event) { ' . "\n" . '							var d = $(this).attr(\'data-default\');' . "\n" . '							if ($(event.data.fake_input).val()!=\'\' && $(event.data.fake_input).val()!=d) { ' . "\n" . '								if( (event.data.minChars <= $(event.data.fake_input).val().length) && (!event.data.maxChars || (event.data.maxChars >= $(event.data.fake_input).val().length)) )' . "\n" . '									$(event.data.real_input).addTag($(event.data.fake_input).val(),{focus:true,unique:(settings.unique)});' . "\n" . '							} else {' . "\n" . '								$(event.data.fake_input).val($(event.data.fake_input).attr(\'data-default\'));' . "\n" . '								$(event.data.fake_input).css(\'color\',settings.placeholderColor);' . "\n" . '							}' . "\n" . '							return false;' . "\n" . '						});' . "\n" . '				' . "\n" . '				}' . "\n" . '				// if user types a comma, create a new tag' . "\n" . '				$(data.fake_input).bind(\'keypress\',data,function(event) {' . "\n" . '					if (event.which==event.data.delimiter.charCodeAt(0) || event.which==13 ) {' . "\n" . '					    event.preventDefault();' . "\n" . '						if( (event.data.minChars <= $(event.data.fake_input).val().length) && (!event.data.maxChars || (event.data.maxChars >= $(event.data.fake_input).val().length)) )' . "\n" . '							$(event.data.real_input).addTag($(event.data.fake_input).val(),{focus:true,unique:(settings.unique)});' . "\n" . '					  	$(event.data.fake_input).resetAutosize(settings);' . "\n" . '						return false;' . "\n" . '					} else if (event.data.autosize) {' . "\n" . '			            $(event.data.fake_input).doAutosize(settings);' . "\n" . '            ' . "\n" . '          			}' . "\n" . '				});' . "\n" . '				//Delete last tag on backspace' . "\n" . '				data.removeWithBackspace && $(data.fake_input).bind(\'keydown\', function(event)' . "\n" . '				{' . "\n" . '					if(event.keyCode == 8 && $(this).val() == \'\')' . "\n" . '					{' . "\n" . '						 event.preventDefault();' . "\n" . '						 var last_tag = $(this).closest(\'.tagsinput\').find(\'.tag:last\').text();' . "\n" . '						 var id = $(this).attr(\'id\').replace(/_tag$/, \'\');' . "\n" . '						 last_tag = last_tag.replace(/[\\s]+x$/, \'\');' . "\n" . '						 $(\'#\' + id).removeTag(escape(last_tag));' . "\n" . '						 $(this).trigger(\'focus\');' . "\n" . '					}' . "\n" . '				});' . "\n" . '				$(data.fake_input).blur();' . "\n" . '				' . "\n" . '				//Removes the not_valid class when user changes the value of the fake input' . "\n" . '				if(data.unique) {' . "\n" . '				    $(data.fake_input).keydown(function(event){' . "\n" . '				        if(event.keyCode == 8 || String.fromCharCode(event.which).match(/\\w+|[áéíóúÁÉÍÓÚñÑ,/]+/)) {' . "\n" . '				            $(this).removeClass(\'not_valid\');' . "\n" . '				        }' . "\n" . '				    });' . "\n" . '				}' . "\n" . '			} // if settings.interactive' . "\n" . '		});' . "\n" . '			' . "\n" . '		return this;' . "\n" . '	' . "\n" . '	};' . "\n" . '	' . "\n" . '	$.fn.tagsInput.updateTagsField = function(obj,tagslist) { ' . "\n" . '		var id = $(obj).attr(\'id\');' . "\n" . '		$(obj).val(tagslist.join(delimiter[id]));' . "\n" . '	};' . "\n" . '	' . "\n" . '	$.fn.tagsInput.importTags = function(obj,val) {			' . "\n" . '		$(obj).val(\'\');' . "\n" . '		var id = $(obj).attr(\'id\');' . "\n" . '		var tags = val.split(delimiter[id]);' . "\n" . '		for (i=0; i<tags.length; i++) { ' . "\n" . '			$(obj).addTag(tags[i],{focus:false,callback:false});' . "\n" . '		}' . "\n" . '		if(tags_callbacks[id] && tags_callbacks[id][\'onChange\'])' . "\n" . '		{' . "\n" . '			var f = tags_callbacks[id][\'onChange\'];' . "\n" . '			f.call(obj, obj, tags[i]);' . "\n" . '		}' . "\n" . '	};' . "\n" . '' . "\n" . '})(jQuery);' . "\n" . '';

?>
