<?php
//dezend by http://www.yunlu99.com/
echo '// jQuery Slider Plugin' . "\n" . '// Egor Khmelev - http://blog.egorkhmelev.com/ - hmelyoff@gmail.com' . "\n" . '' . "\n" . '(function(){' . "\n" . '' . "\n" . '  // Simple Inheritance' . "\n" . '  Function.prototype.inheritFrom = function(BaseClass, oOverride){' . "\n" . '  	var Inheritance = function() {};' . "\n" . '  	Inheritance.prototype = BaseClass.prototype;' . "\n" . '  	this.prototype = new Inheritance();' . "\n" . '  	this.prototype.constructor = this;' . "\n" . '  	this.prototype.baseConstructor = BaseClass;' . "\n" . '  	this.prototype.superClass = BaseClass.prototype;' . "\n" . '' . "\n" . '  	if(oOverride){' . "\n" . '  		for(var i in oOverride) {' . "\n" . '  			this.prototype[i] = oOverride[i];' . "\n" . '  		}' . "\n" . '  	}' . "\n" . '  };' . "\n" . '  ' . "\n" . '  // Format numbers' . "\n" . '  Number.prototype.jSliderNice=function(iRoundBase){' . "\n" . '  	var re=/^(-)?(\\d+)([\\.,](\\d+))?$/;' . "\n" . '  	var iNum=Number(this);' . "\n" . '  	var sNum=String(iNum);' . "\n" . '  	var aMatches;' . "\n" . '  	var sDecPart=\'\';' . "\n" . '  	var sTSeparator=\' \';' . "\n" . '  	if((aMatches = sNum.match(re))){' . "\n" . '  		var sIntPart=aMatches[2];' . "\n" . '  		var iDecPart=(aMatches[4]) ? Number(\'0.\'+aMatches[4]) : 0;' . "\n" . '  		if(iDecPart){' . "\n" . '  			var iRF=Math.pow(10, (iRoundBase) ? iRoundBase : 2);' . "\n" . '  			iDecPart=Math.round(iDecPart*iRF);' . "\n" . '  			sNewDecPart=String(iDecPart);' . "\n" . '  			sDecPart = sNewDecPart;' . "\n" . '  			if(sNewDecPart.length < iRoundBase){' . "\n" . '  				var iDiff = iRoundBase-sNewDecPart.length;' . "\n" . '  				for (var i=0; i < iDiff; i++) {' . "\n" . '  					sDecPart = "0" + sDecPart;' . "\n" . '  				};' . "\n" . '  			}' . "\n" . '  			sDecPart = "," + sDecPart;' . "\n" . '  		} else {' . "\n" . '  			if(iRoundBase && iRoundBase != 0){' . "\n" . '  				for (var i=0; i < iRoundBase; i++) {' . "\n" . '  					sDecPart += "0";' . "\n" . '  				};' . "\n" . '  				sDecPart = "," + sDecPart;' . "\n" . '  			}' . "\n" . '  		}' . "\n" . '  		var sResult;' . "\n" . '  		if(Number(sIntPart) < 1000){' . "\n" . '  			sResult = sIntPart+sDecPart;' . "\n" . '  		}else{' . "\n" . '  			var sNewNum=\'\';' . "\n" . '  			var i;' . "\n" . '  			for(i=1; i*3<sIntPart.length; i++)' . "\n" . '  				sNewNum=sTSeparator+sIntPart.substring(sIntPart.length - i*3, sIntPart.length - (i-1)*3)+sNewNum;' . "\n" . '  			sResult = sIntPart.substr(0, 3 - i*3 + sIntPart.length)+sNewNum+sDecPart;' . "\n" . '  		}' . "\n" . '  		if(aMatches[1])' . "\n" . '  			return \'-\'+sResult;' . "\n" . '  		else' . "\n" . '  			return sResult;' . "\n" . '  	}' . "\n" . '  	else{' . "\n" . '  		return sNum;' . "\n" . '  	}' . "\n" . '  };' . "\n" . '' . "\n" . '  this.jSliderIsArray = function( value ){' . "\n" . '    if( typeof value == "undefined" ) return false;' . "\n" . '    ' . "\n" . '    if (value instanceof Array ||  // Works quickly in same execution context.' . "\n" . '        // If value is from a different execution context then' . "\n" . '        // !(value instanceof Object), which lets us early out in the common' . "\n" . '        // case when value is from the same context but not an array.' . "\n" . '        // The {if (value)} check above means we don\'t have to worry about' . "\n" . '        // undefined behavior of Object.prototype.toString on null/undefined.' . "\n" . '        //' . "\n" . '        // HACK: In order to use an Object prototype method on the arbitrary' . "\n" . '        //   value, the compiler requires the value be cast to type Object,' . "\n" . '        //   even though the ECMA spec explicitly allows it.' . "\n" . '        (!(value instanceof Object) &&' . "\n" . '         (Object.prototype.toString.call(' . "\n" . '             /** @type {Object} */ (value)) == \'[object Array]\') ||' . "\n" . '' . "\n" . '         // In IE all non value types are wrapped as objects across window' . "\n" . '         // boundaries (not iframe though) so we have to do object detection' . "\n" . '         // for this edge case' . "\n" . '         typeof value.length == \'number\' &&' . "\n" . '         typeof value.splice != \'undefined\' &&' . "\n" . '         typeof value.propertyIsEnumerable != \'undefined\' &&' . "\n" . '         !value.propertyIsEnumerable(\'splice\')' . "\n" . '' . "\n" . '        )) {' . "\n" . '      return true;' . "\n" . '    }' . "\n" . '    ' . "\n" . '    return false;' . "\n" . '  }' . "\n" . '  ' . "\n" . '  ' . "\n" . '})();' . "\n" . '' . "\n" . '' . "\n" . '// Simple JavaScript Templating' . "\n" . '// John Resig - http://ejohn.org/ - MIT Licensed' . "\n" . '' . "\n" . '(function(){' . "\n" . '  var cache = {};' . "\n" . '  ' . "\n" . '  this.jSliderTmpl = function jSliderTmpl(str, data){' . "\n" . '    // Figure out if we\'re getting a template, or if we need to' . "\n" . '    // load the template - and be sure to cache the result.' . "\n" . '    var fn = !(/\\W/).test(str) ?' . "\n" . '      cache[str] = cache[str] ||' . "\n" . '        jSliderTmpl(str) :' . "\n" . '      ' . "\n" . '      // Generate a reusable function that will serve as a template' . "\n" . '      // generator (and which will be cached).' . "\n" . '      new Function("obj",' . "\n" . '        "var p=[],print=function(){p.push.apply(p,arguments);};" +' . "\n" . '        ' . "\n" . '        // Introduce the data as local variables using with(){}' . "\n" . '        "with(obj){p.push(\'" +' . "\n" . '        ' . "\n" . '        // Convert the template into pure JavaScript' . "\n" . '        str' . "\n" . '          .replace(/[\\r\\t\\n]/g, " ")' . "\n" . '          .split("<%").join("\\t")' . "\n" . '          .replace(/((^|%>)[^\\t]*)\'/g, "$1\\r")' . "\n" . '          .replace(/\\t=(.*?)%>/g, "\',$1,\'")' . "\n" . '          .split("\\t").join("\');")' . "\n" . '          .split("%>").join("p.push(\'")' . "\n" . '          .split("\\r").join("\\\\\'")' . "\n" . '      + "\');}return p.join(\'\');");' . "\n" . '    ' . "\n" . '    // Provide some basic currying to the user' . "\n" . '    return data ? fn( data ) : fn;' . "\n" . '  };' . "\n" . '})();' . "\n" . '' . "\n" . '' . "\n" . '// Draggable Class' . "\n" . '// Egor Khmelev - http://blog.egorkhmelev.com/' . "\n" . '' . "\n" . '(function( $ ){' . "\n" . '' . "\n" . '  this.Draggable = function(){' . "\n" . '  	this._init.apply( this, arguments );' . "\n" . '  };' . "\n" . '' . "\n" . '  Draggable.prototype = {' . "\n" . '  	// Methods for re-init in child class' . "\n" . '  	oninit: function(){},' . "\n" . '  	events: function(){},' . "\n" . '  	onmousedown: function(){' . "\n" . '  		this.ptr.css({ position: "absolute" });' . "\n" . '  	},' . "\n" . '  	onmousemove: function( evt, x, y ){' . "\n" . '  		this.ptr.css({ left: x, top: y });' . "\n" . '  	},' . "\n" . '  	onmouseup: function(){},' . "\n" . '' . "\n" . '  	isDefault: {' . "\n" . '  		drag: false,' . "\n" . '  		clicked: false,' . "\n" . '  		toclick: true,' . "\n" . '  		mouseup: false' . "\n" . '  	},' . "\n" . '' . "\n" . '  	_init: function(){' . "\n" . '  		if( arguments.length > 0 ){' . "\n" . '  			this.ptr = $(arguments[0]);' . "\n" . '  			this.outer = $(".draggable-outer");' . "\n" . '' . "\n" . '  			this.is = {};' . "\n" . '  			$.extend( this.is, this.isDefault );' . "\n" . '' . "\n" . '  			var _offset = this.ptr.offset();' . "\n" . '  			this.d = {' . "\n" . '  				left: _offset.left,' . "\n" . '  				top: _offset.top,' . "\n" . '  				width: this.ptr.width(),' . "\n" . '  				height: this.ptr.height()' . "\n" . '  			};' . "\n" . '' . "\n" . '  			this.oninit.apply( this, arguments );' . "\n" . '' . "\n" . '  			this._events();' . "\n" . '  		}' . "\n" . '  	},' . "\n" . '  	_getPageCoords: function( event ){' . "\n" . '  	  if( event.targetTouches && event.targetTouches[0] ){' . "\n" . '  	    return { x: event.targetTouches[0].pageX, y: event.targetTouches[0].pageY };' . "\n" . '  	  } else' . "\n" . '  	    return { x: event.pageX, y: event.pageY };' . "\n" . '  	},' . "\n" . '  	_bindEvent: function( ptr, eventType, handler ){' . "\n" . '  	  var self = this;' . "\n" . '' . "\n" . '  	  if( this.supportTouches_ )' . "\n" . '        ptr.get(0).addEventListener( this.events_[ eventType ], handler, false );' . "\n" . '  	  ' . "\n" . '  	  else' . "\n" . '  	    ptr.bind( this.events_[ eventType ], handler );' . "\n" . '  	},' . "\n" . '  	_events: function(){' . "\n" . '  		var self = this;' . "\n" . '' . "\n" . '      this.supportTouches_ = ( $.browser.webkit && navigator.userAgent.indexOf("Mobile") != -1 );' . "\n" . '      this.events_ = {' . "\n" . '        "click": this.supportTouches_ ? "touchstart" : "click",' . "\n" . '        "down": this.supportTouches_ ? "touchstart" : "mousedown",' . "\n" . '        "move": this.supportTouches_ ? "touchmove" : "mousemove",' . "\n" . '        "up"  : this.supportTouches_ ? "touchend" : "mouseup"' . "\n" . '      };' . "\n" . '' . "\n" . '      this._bindEvent( $( document ), "move", function( event ){' . "\n" . '				if( self.is.drag ){' . "\n" . '          event.stopPropagation();' . "\n" . '          event.preventDefault();' . "\n" . '					self._mousemove( event );' . "\n" . '				}' . "\n" . '			});' . "\n" . '      this._bindEvent( $( document ), "down", function( event ){' . "\n" . '				if( self.is.drag ){' . "\n" . '          event.stopPropagation();' . "\n" . '          event.preventDefault();' . "\n" . '				}' . "\n" . '			});' . "\n" . '      this._bindEvent( $( document ), "up", function( event ){' . "\n" . '				self._mouseup( event );' . "\n" . '			});' . "\n" . '			' . "\n" . '      this._bindEvent( this.ptr, "down", function( event ){' . "\n" . '				self._mousedown( event );' . "\n" . '				return false;' . "\n" . '			});' . "\n" . '      this._bindEvent( this.ptr, "up", function( event ){' . "\n" . '				self._mouseup( event );' . "\n" . '			});' . "\n" . '			' . "\n" . '  		this.ptr.find("a")' . "\n" . '  			.click(function(){' . "\n" . '  				self.is.clicked = true;' . "\n" . '' . "\n" . '  				if( !self.is.toclick ){' . "\n" . '  					self.is.toclick = true;' . "\n" . '  					return false;' . "\n" . '  				}' . "\n" . '  			})' . "\n" . '  			.mousedown(function( event ){' . "\n" . '  				self._mousedown( event );' . "\n" . '  				return false;' . "\n" . '  			});' . "\n" . '' . "\n" . '  		this.events();' . "\n" . '  	},' . "\n" . '  	_mousedown: function( evt ){' . "\n" . '  		this.is.drag = true;' . "\n" . '  		this.is.clicked = false;' . "\n" . '  		this.is.mouseup = false;' . "\n" . '' . "\n" . '  		var _offset = this.ptr.offset();' . "\n" . '  		var coords = this._getPageCoords( evt );' . "\n" . '  		this.cx = coords.x - _offset.left;' . "\n" . '  		this.cy = coords.y - _offset.top;' . "\n" . '' . "\n" . '  		$.extend(this.d, {' . "\n" . '  			left: _offset.left,' . "\n" . '  			top: _offset.top,' . "\n" . '  			width: this.ptr.width(),' . "\n" . '  			height: this.ptr.height()' . "\n" . '  		});' . "\n" . '' . "\n" . '  		if( this.outer && this.outer.get(0) ){' . "\n" . '  			this.outer.css({ height: Math.max(this.outer.height(), $(document.body).height()), overflow: "hidden" });' . "\n" . '  		}' . "\n" . '' . "\n" . '  		this.onmousedown( evt );' . "\n" . '  	},' . "\n" . '  	_mousemove: function( evt ){' . "\n" . '  		this.is.toclick = false;' . "\n" . '  		var coords = this._getPageCoords( evt );' . "\n" . '  		this.onmousemove( evt, coords.x - this.cx, coords.y - this.cy );' . "\n" . '  	},' . "\n" . '  	_mouseup: function( evt ){' . "\n" . '  		var oThis = this;' . "\n" . '' . "\n" . '  		if( this.is.drag ){' . "\n" . '  			this.is.drag = false;' . "\n" . '' . "\n" . '  			if( this.outer && this.outer.get(0) ){' . "\n" . '' . "\n" . '  				if( $.browser.mozilla ){' . "\n" . '  					this.outer.css({ overflow: "hidden" });' . "\n" . '  				} else {' . "\n" . '  					this.outer.css({ overflow: "visible" });' . "\n" . '  				}' . "\n" . '' . "\n" . '  				if( $.browser.msie && $.browser.version == \'6.0\' ){' . "\n" . '  					this.outer.css({ height: "100%" });' . "\n" . '  				} else {' . "\n" . '  					this.outer.css({ height: "auto" });' . "\n" . '  				}	' . "\n" . '  			}' . "\n" . '' . "\n" . '  			this.onmouseup( evt );' . "\n" . '  		}' . "\n" . '  	}' . "\n" . '' . "\n" . '  };' . "\n" . '' . "\n" . '})( jQuery );' . "\n" . '' . "\n" . '' . "\n" . '' . "\n" . '// jQuery Slider (Safari)' . "\n" . '// Egor Khmelev - http://blog.egorkhmelev.com/' . "\n" . '' . "\n" . '(function( $ ) {' . "\n" . '' . "\n" . '	$.slider = function( node, settings ){' . "\n" . '	  var jNode = $(node);' . "\n" . '	  if( !jNode.data( "jslider" ) )' . "\n" . '	    jNode.data( "jslider", new jSlider( node, settings ) );' . "\n" . '	  ' . "\n" . '	  return jNode.data( "jslider" );' . "\n" . '	};' . "\n" . '	' . "\n" . '	$.fn.slider = function( action, opt_value ){' . "\n" . '	  var returnValue, args = arguments;' . "\n" . '	  ' . "\n" . '	  function isDef( val ){' . "\n" . '	    return val !== undefined;' . "\n" . '	  };' . "\n" . '' . "\n" . '	  function isDefAndNotNull( val ){' . "\n" . '      return val != null;' . "\n" . '	  };' . "\n" . '	  ' . "\n" . '		this.each(function(){' . "\n" . '		  var self = $.slider( this, action );' . "\n" . '		  ' . "\n" . '		  // do actions' . "\n" . '		  if( typeof action == "string" ){' . "\n" . '		    switch( action ){' . "\n" . '		      case "value":' . "\n" . '		        if( isDef( args[ 1 ] ) && isDef( args[ 2 ] ) ){' . "\n" . '		          var pointers = self.getPointers();' . "\n" . '		          if( isDefAndNotNull( pointers[0] ) && isDefAndNotNull( args[1] ) ){' . "\n" . '		            pointers[0].set( args[ 1 ] );' . "\n" . '		            pointers[0].setIndexOver();' . "\n" . '		          }' . "\n" . '		          ' . "\n" . '		          if( isDefAndNotNull( pointers[1] ) && isDefAndNotNull( args[2] ) ){' . "\n" . '		            pointers[1].set( args[ 2 ] );' . "\n" . '		            pointers[1].setIndexOver();' . "\n" . '		          }' . "\n" . '		        }' . "\n" . '		        ' . "\n" . '		        else if( isDef( args[ 1 ] ) ){' . "\n" . '		          var pointers = self.getPointers();' . "\n" . '		          if( isDefAndNotNull( pointers[0] ) && isDefAndNotNull( args[1] ) ){' . "\n" . '		            pointers[0].set( args[ 1 ] );' . "\n" . '		            pointers[0].setIndexOver();' . "\n" . '		          }' . "\n" . '		        }' . "\n" . '		        ' . "\n" . '		        else' . "\n" . '  		        returnValue = self.getValue();' . "\n" . '' . "\n" . '		        break;' . "\n" . '' . "\n" . '		      case "prc":' . "\n" . '		        if( isDef( args[ 1 ] ) && isDef( args[ 2 ] ) ){' . "\n" . '		          var pointers = self.getPointers();' . "\n" . '		          if( isDefAndNotNull( pointers[0] ) && isDefAndNotNull( args[1] ) ){' . "\n" . '		            pointers[0]._set( args[ 1 ] );' . "\n" . '		            pointers[0].setIndexOver();' . "\n" . '		          }' . "\n" . '' . "\n" . '		          if( isDefAndNotNull( pointers[1] ) && isDefAndNotNull( args[2] ) ){' . "\n" . '		            pointers[1]._set( args[ 2 ] );' . "\n" . '		            pointers[1].setIndexOver();' . "\n" . '		          }' . "\n" . '		        }' . "\n" . '' . "\n" . '		        else if( isDef( args[ 1 ] ) ){' . "\n" . '		          var pointers = self.getPointers();' . "\n" . '		          if( isDefAndNotNull( pointers[0] ) && isDefAndNotNull( args[1] ) ){' . "\n" . '		            pointers[0]._set( args[ 1 ] );' . "\n" . '		            pointers[0].setIndexOver();' . "\n" . '		          }' . "\n" . '		        }' . "\n" . '' . "\n" . '		        else' . "\n" . '  		        returnValue = self.getPrcValue();' . "\n" . '' . "\n" . '		        break;' . "\n" . '' . "\n" . '  		    case "calculatedValue":' . "\n" . '  		      var value = self.getValue().split(";");' . "\n" . '  		      returnValue = "";' . "\n" . '  		      for (var i=0; i < value.length; i++) {' . "\n" . '  		        returnValue += (i > 0 ? ";" : "") + self.nice( value[i] );' . "\n" . '  		      };' . "\n" . '  		      ' . "\n" . '  		      break;' . "\n" . '  		      ' . "\n" . '  		    case "skin":' . "\n" . '		        self.setSkin( args[1] );' . "\n" . '' . "\n" . '  		      break;' . "\n" . '		    };' . "\n" . '		  ' . "\n" . '		  }' . "\n" . '		  ' . "\n" . '		  // return actual object' . "\n" . '		  else if( !action && !opt_value ){' . "\n" . '		    if( !jSliderIsArray( returnValue ) )' . "\n" . '		      returnValue = [];' . "\n" . '' . "\n" . '		    returnValue.push( slider );' . "\n" . '		  }' . "\n" . '		});' . "\n" . '		' . "\n" . '		// flatten array just with one slider' . "\n" . '		if( jSliderIsArray( returnValue ) && returnValue.length == 1 )' . "\n" . '		  returnValue = returnValue[ 0 ];' . "\n" . '		' . "\n" . '		return returnValue || this;' . "\n" . '	};' . "\n" . '  ' . "\n" . '  var OPTIONS = {' . "\n" . '' . "\n" . '    settings: {' . "\n" . '      from: 1,' . "\n" . '      to: 10,' . "\n" . '      step: 1,' . "\n" . '      smooth: true,' . "\n" . '      limits: true,' . "\n" . '      round: 0,' . "\n" . '      value: "5;7",' . "\n" . '      dimension: ""' . "\n" . '    },' . "\n" . '    ' . "\n" . '    className: "jslider",' . "\n" . '    selector: ".jslider-",' . "\n" . '' . "\n" . '    template: jSliderTmpl(' . "\n" . '      \'<span class="<%=className%>">\' +' . "\n" . '        \'<table><tr><td>\' +' . "\n" . '          \'<div class="<%=className%>-bg">\' +' . "\n" . '            \'<i class="l"><i></i></i><i class="r"><i></i></i>\' +' . "\n" . '            \'<i class="v"><i></i></i>\' +' . "\n" . '          \'</div>\' +' . "\n" . '' . "\n" . '          \'<div class="<%=className%>-pointer"><i></i></div>\' +' . "\n" . '          \'<div class="<%=className%>-pointer <%=className%>-pointer-to"><i></i></div>\' +' . "\n" . '        ' . "\n" . '' . "\n" . '          \'<div class="<%=className%>-value"><span></span><%=settings.dimension%></div>\' +' . "\n" . '          \'<div class="<%=className%>-value <%=className%>-value-to"><span></span><%=settings.dimension%></div>\' +' . "\n" . '          ' . "\n" . '          \'<div class="<%=className%>-scale"><%=scale%></div>\'+' . "\n" . '' . "\n" . '        \'</td></tr></table>\' +' . "\n" . '      \'</span>\'' . "\n" . '    )' . "\n" . '    ' . "\n" . '  };' . "\n" . '' . "\n" . '  this.jSlider = function(){' . "\n" . '  	return this.init.apply( this, arguments );' . "\n" . '  };' . "\n" . '' . "\n" . '  jSlider.prototype = {' . "\n" . '    init: function( node, settings ){' . "\n" . '      this.settings = $.extend(true, {}, OPTIONS.settings, settings ? settings : {});' . "\n" . '      ' . "\n" . '      // obj.sliderHandler = this;' . "\n" . '      this.inputNode = $( node ).hide();' . "\n" . '      						' . "\n" . '			this.settings.interval = this.settings.to-this.settings.from;' . "\n" . '			this.settings.value = this.inputNode.attr("value");' . "\n" . '			' . "\n" . '			if( this.settings.calculate && $.isFunction( this.settings.calculate ) )' . "\n" . '			  this.nice = this.settings.calculate;' . "\n" . '' . "\n" . '			if( this.settings.onstatechange && $.isFunction( this.settings.onstatechange ) )' . "\n" . '			  this.onstatechange = this.settings.onstatechange;' . "\n" . '' . "\n" . '      this.is = {' . "\n" . '        init: false' . "\n" . '      };' . "\n" . '			this.o = {};' . "\n" . '' . "\n" . '      this.create();' . "\n" . '    },' . "\n" . '    ' . "\n" . '    onstatechange: function(){},' . "\n" . '    ' . "\n" . '    create: function(){' . "\n" . '      var $this = this;' . "\n" . '      ' . "\n" . '      this.domNode = $( OPTIONS.template({' . "\n" . '        className: OPTIONS.className,' . "\n" . '        settings: {' . "\n" . '          from: this.nice( this.settings.from ),' . "\n" . '          to: this.nice( this.settings.to ),' . "\n" . '          dimension: this.settings.dimension' . "\n" . '        },' . "\n" . '        scale: this.generateScale()' . "\n" . '      }) );' . "\n" . '      ' . "\n" . '      this.inputNode.after( this.domNode );' . "\n" . '      this.drawScale();' . "\n" . '      ' . "\n" . '      // set skin class' . "\n" . '      if( this.settings.skin && this.settings.skin.length > 0 )' . "\n" . '        this.setSkin( this.settings.skin );' . "\n" . '' . "\n" . '			this.sizes = {' . "\n" . '			  domWidth: this.domNode.width(),' . "\n" . '			  domOffset: this.domNode.offset()' . "\n" . '			};' . "\n" . '' . "\n" . '      // find some objects' . "\n" . '      $.extend(this.o, {' . "\n" . '        pointers: {},' . "\n" . '        labels: {' . "\n" . '          0: {' . "\n" . '            o: this.domNode.find(OPTIONS.selector + "value").not(OPTIONS.selector + "value-to")' . "\n" . '          },' . "\n" . '          1: {' . "\n" . '            o: this.domNode.find(OPTIONS.selector + "value").filter(OPTIONS.selector + "value-to")' . "\n" . '          }' . "\n" . '        },' . "\n" . '        limits: {' . "\n" . '          0: this.domNode.find(OPTIONS.selector + "label").not(OPTIONS.selector + "label-to"),' . "\n" . '          1: this.domNode.find(OPTIONS.selector + "label").filter(OPTIONS.selector + "label-to")' . "\n" . '        }' . "\n" . '      });' . "\n" . '' . "\n" . '      $.extend(this.o.labels[0], {' . "\n" . '        value: this.o.labels[0].o.find("span")' . "\n" . '      });' . "\n" . '' . "\n" . '      $.extend(this.o.labels[1], {' . "\n" . '        value: this.o.labels[1].o.find("span")' . "\n" . '      });' . "\n" . '' . "\n" . '      ' . "\n" . '      if( !$this.settings.value.split(";")[1] ){' . "\n" . '        this.settings.single = true;' . "\n" . '        this.domNode.addDependClass("single");' . "\n" . '      }' . "\n" . '' . "\n" . '      if( !$this.settings.limits )' . "\n" . '        this.domNode.addDependClass("limitless");' . "\n" . '' . "\n" . '      this.domNode.find(OPTIONS.selector + "pointer").each(function( i ){' . "\n" . '        var value = $this.settings.value.split(";")[i];' . "\n" . '        if( value ){' . "\n" . '          $this.o.pointers[i] = new jSliderPointer( this, i, $this );' . "\n" . '' . "\n" . '          var prev = $this.settings.value.split(";")[i-1];' . "\n" . '          if( prev && new Number(value) < new Number(prev) ) value = prev;' . "\n" . '' . "\n" . '          value = value < $this.settings.from ? $this.settings.from : value;' . "\n" . '          value = value > $this.settings.to ? $this.settings.to : value;' . "\n" . '        ' . "\n" . '          $this.o.pointers[i].set( value, true );' . "\n" . '        }' . "\n" . '      });' . "\n" . '      ' . "\n" . '      this.o.value = this.domNode.find(".v");' . "\n" . '      this.is.init = true;' . "\n" . '      ' . "\n" . '      $.each(this.o.pointers, function(i){' . "\n" . '        $this.redraw(this);' . "\n" . '      });' . "\n" . '      ' . "\n" . '      (function(self){' . "\n" . '        $(window).resize(function(){' . "\n" . '          self.onresize();' . "\n" . '        });' . "\n" . '      })(this);' . "\n" . '' . "\n" . '    },' . "\n" . '    ' . "\n" . '    setSkin: function( skin ){' . "\n" . '      if( this.skin_ )' . "\n" . '        this.domNode.removeDependClass( this.skin_, "_" );' . "\n" . '' . "\n" . '      this.domNode.addDependClass( this.skin_ = skin, "_" );' . "\n" . '    },' . "\n" . '    ' . "\n" . '    setPointersIndex: function( i ){' . "\n" . '      $.each(this.getPointers(), function(i){' . "\n" . '        this.index( i );' . "\n" . '      });' . "\n" . '    },' . "\n" . '    ' . "\n" . '    getPointers: function(){' . "\n" . '      return this.o.pointers;' . "\n" . '    },' . "\n" . '    ' . "\n" . '    generateScale: function(){' . "\n" . '      if( this.settings.scale && this.settings.scale.length > 0 ){' . "\n" . '        var str = "";' . "\n" . '        var s = this.settings.scale;' . "\n" . '        var prc = Math.round((100/(s.length-1))*10)/10;' . "\n" . '		for( var i=0; i < s.length; i++ ){' . "\n" . '			  str += \'<span style="left: \' + i*prc + \'%">\' + ( s[i] != \'|\' ? \'<ins>\' + s[i] + \'</ins>\' : \'\' ) + \'</span>\';' . "\n" . '		};' . "\n" . '        return str;' . "\n" . '      } else return "";' . "\n" . '' . "\n" . '      return "";' . "\n" . '    },' . "\n" . '    ' . "\n" . '    drawScale: function(){' . "\n" . '      this.domNode.find(OPTIONS.selector + "scale span ins").each(function(){' . "\n" . '        $(this).css({ marginLeft: -$(this).outerWidth()/2 });' . "\n" . '      });' . "\n" . '    },' . "\n" . '    ' . "\n" . '    onresize: function(){' . "\n" . '      var self = this;' . "\n" . '			this.sizes = {' . "\n" . '			  domWidth: this.domNode.width(),' . "\n" . '			  domOffset: this.domNode.offset()' . "\n" . '			};' . "\n" . '' . "\n" . '      $.each(this.o.pointers, function(i){' . "\n" . '        self.redraw(this);' . "\n" . '      });' . "\n" . '    },' . "\n" . '    ' . "\n" . '    limits: function( x, pointer ){' . "\n" . '  	  // smooth' . "\n" . '  	  if( !this.settings.smooth ){' . "\n" . '  	    var step = this.settings.step*100 / ( this.settings.interval );' . "\n" . '  	    x = Math.round( x/step ) * step;' . "\n" . '  	  }' . "\n" . '  	  ' . "\n" . '  	  var another = this.o.pointers[1-pointer.uid];' . "\n" . '  	  if( another && pointer.uid && x < another.value.prc ) x = another.value.prc;' . "\n" . '  	  if( another && !pointer.uid && x > another.value.prc ) x = another.value.prc;' . "\n" . '' . "\n" . '      // base limit' . "\n" . '  	  if( x < 0 ) x = 0;' . "\n" . '  	  if( x > 100 ) x = 100;' . "\n" . '  	  ' . "\n" . '      return Math.round( x*10 ) / 10;' . "\n" . '    },' . "\n" . '    ' . "\n" . '    redraw: function( pointer ){' . "\n" . '      if( !this.is.init ) return false;' . "\n" . '      ' . "\n" . '      this.setValue();' . "\n" . '      ' . "\n" . '      // redraw range line' . "\n" . '      if( this.o.pointers[0] && this.o.pointers[1] )' . "\n" . '        this.o.value.css({ left: this.o.pointers[0].value.prc + "%", width: ( this.o.pointers[1].value.prc - this.o.pointers[0].value.prc ) + "%" });' . "\n" . '' . "\n" . '      this.o.labels[pointer.uid].value.html(' . "\n" . '        this.nice(' . "\n" . '          pointer.value.origin' . "\n" . '        )' . "\n" . '      );' . "\n" . '      ' . "\n" . '      // redraw position of labels' . "\n" . '      this.redrawLabels( pointer );' . "\n" . '' . "\n" . '    },' . "\n" . '    ' . "\n" . '    redrawLabels: function( pointer ){' . "\n" . '' . "\n" . '      function setPosition( label, sizes, prc ){' . "\n" . '    	  sizes.margin = -sizes.label/2;' . "\n" . '' . "\n" . '        // left limit' . "\n" . '        label_left = sizes.border + sizes.margin;' . "\n" . '        if( label_left < 0 )' . "\n" . '          sizes.margin -= label_left;' . "\n" . '' . "\n" . '        // right limit' . "\n" . '        if( sizes.border+sizes.label / 2 > self.sizes.domWidth ){' . "\n" . '          sizes.margin = 0;' . "\n" . '          sizes.right = true;' . "\n" . '        } else' . "\n" . '          sizes.right = false;' . "\n" . '          ' . "\n" . '        label.o.css({ left: prc + "%", marginLeft: sizes.margin, right: "auto" });' . "\n" . '        //if( sizes.right ) label.o.css({ left: "auto", right: 0 });' . "\n" . '        return sizes;' . "\n" . '      }' . "\n" . '' . "\n" . '      var self = this;' . "\n" . '  	  var label = this.o.labels[pointer.uid];' . "\n" . '  	  var prc = pointer.value.prc;' . "\n" . '' . "\n" . '  	  var sizes = {' . "\n" . '  	    label: label.o.outerWidth(),' . "\n" . '  	    right: false,' . "\n" . '  	    border: ( prc * this.sizes.domWidth ) / 100' . "\n" . '  	  };' . "\n" . '' . "\n" . '      //console.log(this.o.pointers[1-pointer.uid])' . "\n" . '      if( !this.settings.single ){' . "\n" . '        // glue if near;' . "\n" . '        var another = this.o.pointers[1-pointer.uid];' . "\n" . '      	var another_label = this.o.labels[another.uid];' . "\n" . '' . "\n" . '        switch( pointer.uid ){' . "\n" . '          case 0:' . "\n" . '            if( sizes.border+sizes.label / 2 > another_label.o.offset().left-this.sizes.domOffset.left ){' . "\n" . '              another_label.o.css({ visibility: "hidden" });' . "\n" . '          	  another_label.value.html( this.nice( another.value.origin ) );' . "\n" . '' . "\n" . '            	label.o.css({ visibility: "visible" });' . "\n" . '' . "\n" . '            	prc = ( another.value.prc - prc ) / 2 + prc;' . "\n" . '            	if( another.value.prc != pointer.value.prc ){' . "\n" . '            	  label.value.html( this.nice(pointer.value.origin) + "&nbsp;&ndash;&nbsp;" + this.nice(another.value.origin) );' . "\n" . '              	sizes.label = label.o.outerWidth();' . "\n" . '              	sizes.border = ( prc * this.sizes.domWidth ) / 100;' . "\n" . '              }' . "\n" . '            } else {' . "\n" . '            	another_label.o.css({ visibility: "visible" });' . "\n" . '            }' . "\n" . '            break;' . "\n" . '' . "\n" . '          case 1:' . "\n" . '            if( sizes.border - sizes.label / 2 < another_label.o.offset().left - this.sizes.domOffset.left + another_label.o.outerWidth() ){' . "\n" . '              another_label.o.css({ visibility: "hidden" });' . "\n" . '          	  another_label.value.html( this.nice(another.value.origin) );' . "\n" . '' . "\n" . '            	label.o.css({ visibility: "visible" });' . "\n" . '' . "\n" . '            	prc = ( prc - another.value.prc ) / 2 + another.value.prc;' . "\n" . '            	if( another.value.prc != pointer.value.prc ){' . "\n" . '            	  label.value.html( this.nice(another.value.origin) + "&nbsp;&ndash;&nbsp;" + this.nice(pointer.value.origin) );' . "\n" . '              	sizes.label = label.o.outerWidth();' . "\n" . '              	sizes.border = ( prc * this.sizes.domWidth ) / 100;' . "\n" . '              }' . "\n" . '            } else {' . "\n" . '              another_label.o.css({ visibility: "visible" });' . "\n" . '            }' . "\n" . '            break;' . "\n" . '        }' . "\n" . '      }' . "\n" . '' . "\n" . '      sizes = setPosition( label, sizes, prc );' . "\n" . '      ' . "\n" . '      /* draw second label */' . "\n" . '      if( another_label ){' . "\n" . '        var sizes = {' . "\n" . '    	    label: another_label.o.outerWidth(),' . "\n" . '    	    right: false,' . "\n" . '    	    border: ( another.value.prc * this.sizes.domWidth ) / 100' . "\n" . '    	  };' . "\n" . '        sizes = setPosition( another_label, sizes, another.value.prc );' . "\n" . '      }' . "\n" . '  	  ' . "\n" . '	    this.redrawLimits();' . "\n" . '    },' . "\n" . '    ' . "\n" . '    redrawLimits: function(){' . "\n" . '  	  if( this.settings.limits ){' . "\n" . '' . "\n" . '        var limits = [ true, true ];' . "\n" . '' . "\n" . '        for( key in this.o.pointers ){' . "\n" . '' . "\n" . '          if( !this.settings.single || key == 0 ){' . "\n" . '          ' . "\n" . '        	  var pointer = this.o.pointers[key];' . "\n" . '            var label = this.o.labels[pointer.uid];' . "\n" . '            var label_left = label.o.offset().left - this.sizes.domOffset.left;' . "\n" . '' . "\n" . '        	  var limit = this.o.limits[0];' . "\n" . '            if( label_left < limit.outerWidth() )' . "\n" . '              limits[0] = false;' . "\n" . '' . "\n" . '        	  var limit = this.o.limits[1];' . "\n" . '        	  if( label_left + label.o.outerWidth() > this.sizes.domWidth - limit.outerWidth() )' . "\n" . '        	    limits[1] = false;' . "\n" . '        	}' . "\n" . '' . "\n" . '        };' . "\n" . '' . "\n" . '        for( var i=0; i < limits.length; i++ ){' . "\n" . '          if( limits[i] )' . "\n" . '            this.o.limits[i].fadeIn("fast");' . "\n" . '          else' . "\n" . '            this.o.limits[i].fadeOut("fast");' . "\n" . '        };' . "\n" . '' . "\n" . '  	  }' . "\n" . '    },' . "\n" . '    ' . "\n" . '    setValue: function(){' . "\n" . '      var value = this.getValue();' . "\n" . '      this.inputNode.attr( "value", value );' . "\n" . '      this.onstatechange.call( this, value );' . "\n" . '    },' . "\n" . '    getValue: function(){' . "\n" . '      if(!this.is.init) return false;' . "\n" . '      var $this = this;' . "\n" . '      ' . "\n" . '      var value = "";' . "\n" . '      $.each( this.o.pointers, function(i){' . "\n" . '        if( this.value.prc != undefined && !isNaN(this.value.prc) ) value += (i > 0 ? ";" : "") + $this.prcToValue( this.value.prc );' . "\n" . '      });' . "\n" . '      return value;' . "\n" . '    },' . "\n" . '    getPrcValue: function(){' . "\n" . '      if(!this.is.init) return false;' . "\n" . '      var $this = this;' . "\n" . '      ' . "\n" . '      var value = "";' . "\n" . '      $.each( this.o.pointers, function(i){' . "\n" . '        if( this.value.prc != undefined && !isNaN(this.value.prc) ) value += (i > 0 ? ";" : "") + this.value.prc;' . "\n" . '      });' . "\n" . '      return value;' . "\n" . '    },' . "\n" . '    prcToValue: function( prc ){' . "\n" . '' . "\n" . '  	  if( this.settings.heterogeneity && this.settings.heterogeneity.length > 0 ){' . "\n" . '    	  var h = this.settings.heterogeneity;' . "\n" . '' . "\n" . '    	  var _start = 0;' . "\n" . '    	  var _from = this.settings.from;' . "\n" . '' . "\n" . '    	  for( var i=0; i <= h.length; i++ ){' . "\n" . '    	    if( h[i] ) var v = h[i].split("/");' . "\n" . '    	    else       var v = [100, this.settings.to];' . "\n" . '    	    ' . "\n" . '    	    v[0] = new Number(v[0]);' . "\n" . '    	    v[1] = new Number(v[1]);' . "\n" . '    	      ' . "\n" . '    	    if( prc >= _start && prc <= v[0] ) {' . "\n" . '    	      var value = _from + ( (prc-_start) * (v[1]-_from) ) / (v[0]-_start);' . "\n" . '    	    }' . "\n" . '' . "\n" . '    	    _start = v[0];' . "\n" . '    	    _from = v[1];' . "\n" . '    	  };' . "\n" . '' . "\n" . '  	  } else {' . "\n" . '        var value = this.settings.from + ( prc * this.settings.interval ) / 100;' . "\n" . '  	  }' . "\n" . '' . "\n" . '      return this.round( value );' . "\n" . '    },' . "\n" . '    ' . "\n" . '  	valueToPrc: function( value, pointer ){  	  ' . "\n" . '  	  if( this.settings.heterogeneity && this.settings.heterogeneity.length > 0 ){' . "\n" . '    	  var h = this.settings.heterogeneity;' . "\n" . '' . "\n" . '    	  var _start = 0;' . "\n" . '    	  var _from = this.settings.from;' . "\n" . '' . "\n" . '    	  for (var i=0; i <= h.length; i++) {' . "\n" . '    	    if(h[i]) var v = h[i].split("/");' . "\n" . '    	    else     var v = [100, this.settings.to];' . "\n" . '    	    v[0] = new Number(v[0]); v[1] = new Number(v[1]);' . "\n" . '    	      ' . "\n" . '    	    if(value >= _from && value <= v[1]){' . "\n" . '    	      var prc = pointer.limits(_start + (value-_from)*(v[0]-_start)/(v[1]-_from));' . "\n" . '    	    }' . "\n" . '' . "\n" . '    	    _start = v[0]; _from = v[1];' . "\n" . '    	  };' . "\n" . '' . "\n" . '  	  } else {' . "\n" . '    	  var prc = pointer.limits((value-this.settings.from)*100/this.settings.interval);' . "\n" . '  	  }' . "\n" . '' . "\n" . '  	  return prc;' . "\n" . '  	},' . "\n" . '    ' . "\n" . '    ' . "\n" . '  	round: function( value ){' . "\n" . '	    value = Math.round( value / this.settings.step ) * this.settings.step;' . "\n" . '  		if( this.settings.round ) value = Math.round( value * Math.pow(10, this.settings.round) ) / Math.pow(10, this.settings.round);' . "\n" . '  		else value = Math.round( value );' . "\n" . '  		return value;' . "\n" . '  	},' . "\n" . '  	' . "\n" . '  	nice: function( value ){' . "\n" . '  		value = value.toString().replace(/,/gi, ".");' . "\n" . '  		value = value.toString().replace(/ /gi, "");' . "\n" . '  		if( Number.prototype.jSliderNice )' . "\n" . '  		  return (new Number(value)).jSliderNice(this.settings.round).replace(/-/gi, "&minus;");' . "\n" . '  		else' . "\n" . '  		  return new Number(value);' . "\n" . '  	}' . "\n" . '    ' . "\n" . '  };' . "\n" . '  ' . "\n" . '  function jSliderPointer(){' . "\n" . '  	this.baseConstructor.apply(this, arguments);' . "\n" . '  }' . "\n" . '' . "\n" . '  jSliderPointer.inheritFrom(Draggable, {' . "\n" . '    oninit: function( ptr, id, _constructor ){' . "\n" . '      this.uid = id;' . "\n" . '      this.parent = _constructor;' . "\n" . '      this.value = {};' . "\n" . '      this.settings = this.parent.settings;' . "\n" . '    },' . "\n" . '  	onmousedown: function(evt){' . "\n" . '  	  this._parent = {' . "\n" . '  	    offset: this.parent.domNode.offset(),' . "\n" . '  	    width: this.parent.domNode.width()' . "\n" . '  	  };' . "\n" . '  	  this.ptr.addDependClass("hover");' . "\n" . '  	  this.setIndexOver();' . "\n" . '  	},' . "\n" . '  	onmousemove: function( evt, x ){' . "\n" . '  	  var coords = this._getPageCoords( evt );' . "\n" . '  	  this._set( this.calc( coords.x ) );' . "\n" . '  	},' . "\n" . '  	onmouseup: function( evt ){' . "\n" . '      // var coords = this._getPageCoords( evt );' . "\n" . '      // this._set( this.calc( coords.x ) );' . "\n" . '' . "\n" . '  	  if( this.parent.settings.callback && $.isFunction(this.parent.settings.callback) )' . "\n" . '  	    this.parent.settings.callback.call( this.parent, this.parent.getValue() );' . "\n" . '  	    ' . "\n" . '  	  this.ptr.removeDependClass("hover");' . "\n" . '  	},' . "\n" . '  	' . "\n" . '  	setIndexOver: function(){' . "\n" . '  	  this.parent.setPointersIndex( 1 );' . "\n" . '  	  this.index( 2 );' . "\n" . '  	},' . "\n" . '  	' . "\n" . '  	index: function( i ){' . "\n" . '  	  this.ptr.css({ zIndex: i });' . "\n" . '  	},' . "\n" . '  	' . "\n" . '  	limits: function( x ){' . "\n" . '  	  return this.parent.limits( x, this );' . "\n" . '  	},' . "\n" . '  	' . "\n" . '  	calc: function(coords){' . "\n" . '  	  var x = this.limits(((coords-this._parent.offset.left)*100)/this._parent.width);' . "\n" . '  	  return x;' . "\n" . '  	},' . "\n" . '' . "\n" . '  	set: function( value, opt_origin ){' . "\n" . '  	  this.value.origin = this.parent.round(value);' . "\n" . '  	  this._set( this.parent.valueToPrc( value, this ), opt_origin );' . "\n" . '  	},  	' . "\n" . '  	_set: function( prc, opt_origin ){' . "\n" . '  	  if( !opt_origin )' . "\n" . '  	    this.value.origin = this.parent.prcToValue(prc);' . "\n" . '' . "\n" . '  	  this.value.prc = prc;' . "\n" . '  		this.ptr.css({ left: prc + "%" });' . "\n" . '  	  this.parent.redraw(this);' . "\n" . '  	}' . "\n" . '  	' . "\n" . '  });' . "\n" . '  ' . "\n" . '  ' . "\n" . '})(jQuery);' . "\n" . '' . "\n" . '' . "\n" . '' . "\n" . '' . "\n" . '' . "\n" . '/* end */';

?>
